
MLX90614_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000443c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db8  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c4  080053c4  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053cc  080053cc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053d0  080053d0  000153d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080053d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  20000064  08005438  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  08005438  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c24a  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e04  00000000  00000000  0002c321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab8  00000000  00000000  0002e128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000085d  00000000  00000000  0002ebe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021def  00000000  00000000  0002f43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ede2  00000000  00000000  0005122c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb369  00000000  00000000  0006000e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030f0  00000000  00000000  0012b378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0012e468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080045f4 	.word	0x080045f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	080045f4 	.word	0x080045f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fe63 	bl	800127c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f841 	bl	800063c <SystemClock_Config>
  HAL_Delay(100);
 80005ba:	2064      	movs	r0, #100	; 0x64
 80005bc:	f000 fed0 	bl	8001360 <HAL_Delay>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f930 	bl	8000824 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 f904 	bl	80007d0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005c8:	f000 f8a6 	bl	8000718 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005cc:	f000 f8d2 	bl	8000774 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80005d0:	f000 f9ea 	bl	80009a8 <SSD1306_Init>
  HAL_I2C_MspInit( & hi2c2);
 80005d4:	4816      	ldr	r0, [pc, #88]	; (8000630 <main+0x84>)
 80005d6:	f000 fccf 	bl	8000f78 <HAL_I2C_MspInit>
  /* USER CODE END 2 */
  float temperature = 0.0f;
 80005da:	f04f 0300 	mov.w	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
  int temp=0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
  MLX90614_Init( & hi2c2);
 80005e4:	4812      	ldr	r0, [pc, #72]	; (8000630 <main+0x84>)
 80005e6:	f000 f990 	bl	800090a <MLX90614_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */
    temperature = MLX90614_ReadTemp( & hi2c2);
 80005ea:	4811      	ldr	r0, [pc, #68]	; (8000630 <main+0x84>)
 80005ec:	f000 f998 	bl	8000920 <MLX90614_ReadTemp>
 80005f0:	ed87 0a07 	vstr	s0, [r7, #28]
    temp=temperature;
 80005f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80005f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005fc:	ee17 3a90 	vmov	r3, s15
 8000600:	61bb      	str	r3, [r7, #24]
    char temp_str[20];
    sprintf(temp_str, "Temp:%d ", temp);
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	69ba      	ldr	r2, [r7, #24]
 8000606:	490b      	ldr	r1, [pc, #44]	; (8000634 <main+0x88>)
 8000608:	4618      	mov	r0, r3
 800060a:	f003 fb4f 	bl	8003cac <siprintf>
    SSD1306_GotoXY(0, 0); // goto 10, 10
 800060e:	2100      	movs	r1, #0
 8000610:	2000      	movs	r0, #0
 8000612:	f000 fb33 	bl	8000c7c <SSD1306_GotoXY>
    SSD1306_Puts(temp_str, & Font_11x18, 1); // print Hello
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2201      	movs	r2, #1
 800061a:	4907      	ldr	r1, [pc, #28]	; (8000638 <main+0x8c>)
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fbc3 	bl	8000da8 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8000622:	f000 fa85 	bl	8000b30 <SSD1306_UpdateScreen>
    HAL_Delay(1000);
 8000626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800062a:	f000 fe99 	bl	8001360 <HAL_Delay>
  while (1) {
 800062e:	e7dc      	b.n	80005ea <main+0x3e>
 8000630:	200000d4 	.word	0x200000d4
 8000634:	0800460c 	.word	0x0800460c
 8000638:	20000000 	.word	0x20000000

0800063c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fb4e 	bl	8003cec <memset>
    0
  };
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
    0
  };

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b2a      	ldr	r3, [pc, #168]	; (8000710 <SystemClock_Config+0xd4>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a29      	ldr	r2, [pc, #164]	; (8000710 <SystemClock_Config+0xd4>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b27      	ldr	r3, [pc, #156]	; (8000710 <SystemClock_Config+0xd4>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <SystemClock_Config+0xd8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000688:	4a22      	ldr	r2, [pc, #136]	; (8000714 <SystemClock_Config+0xd8>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <SystemClock_Config+0xd8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006b0:	2310      	movs	r3, #16
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig( & RCC_OscInitStruct) != HAL_OK) {
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fd8c 	bl	80031e8 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x9e>
    Error_Handler();
 80006d6:	f000 f913 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80006da:	230f      	movs	r3, #15
 80006dc:	60bb      	str	r3, [r7, #8]
    RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2302      	movs	r3, #2
 80006e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig( & RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2102      	movs	r1, #2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 fa2c 	bl	8002b54 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xca>
    Error_Handler();
 8000702:	f000 f8fd 	bl	8000900 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2C1_Init+0x50>)
 800071e:	4a13      	ldr	r2, [pc, #76]	; (800076c <MX_I2C1_Init+0x54>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_I2C1_Init+0x50>)
 8000724:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_I2C1_Init+0x58>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_I2C1_Init+0x50>)
 8000736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init( & hi2c1) != HAL_OK) {
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_I2C1_Init+0x50>)
 8000756:	f001 f8bb 	bl	80018d0 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C1_Init+0x4c>
    Error_Handler();
 8000760:	f000 f8ce 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000080 	.word	0x20000080
 800076c:	40005400 	.word	0x40005400
 8000770:	00061a80 	.word	0x00061a80

08000774 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2C2_Init+0x50>)
 800077a:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <MX_I2C2_Init+0x54>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_I2C2_Init+0x50>)
 8000780:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_I2C2_Init+0x58>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2C2_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_I2C2_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_I2C2_Init+0x50>)
 8000792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000796:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_I2C2_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_I2C2_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <MX_I2C2_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_I2C2_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init( & hi2c2) != HAL_OK) {
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_I2C2_Init+0x50>)
 80007b2:	f001 f88d 	bl	80018d0 <HAL_I2C_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C2_Init+0x4c>
    Error_Handler();
 80007bc:	f000 f8a0 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000d4 	.word	0x200000d4
 80007c8:	40005800 	.word	0x40005800
 80007cc:	00061a80 	.word	0x00061a80

080007d0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_USART2_UART_Init+0x50>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init( & huart2) != HAL_OK) {
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART2_UART_Init+0x4c>)
 8000808:	f002 ff8c 	bl	8003724 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 8000812:	f000 f875 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000128 	.word	0x20000128
 8000820:	40004400 	.word	0x40004400

08000824 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
  };
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a2c      	ldr	r2, [pc, #176]	; (80008f4 <MX_GPIO_Init+0xd0>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <MX_GPIO_Init+0xd0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <MX_GPIO_Init+0xd0>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <MX_GPIO_Init+0xd0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_GPIO_Init+0xd0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <MX_GPIO_Init+0xd0>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_GPIO_Init+0xd0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_GPIO_Init+0xd0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <MX_GPIO_Init+0xd0>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_GPIO_Init+0xd0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2120      	movs	r1, #32
 80008ae:	4812      	ldr	r0, [pc, #72]	; (80008f8 <MX_GPIO_Init+0xd4>)
 80008b0:	f000 fff4 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, & GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	480c      	ldr	r0, [pc, #48]	; (80008fc <MX_GPIO_Init+0xd8>)
 80008cc:	f000 fe52 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008d0:	2320      	movs	r3, #32
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, & GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_GPIO_Init+0xd4>)
 80008e8:	f000 fe44 	bl	8001574 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80008ec:	bf00      	nop
 80008ee:	3728      	adds	r7, #40	; 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000
 80008fc:	40020800 	.word	0x40020800

08000900 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {}
 8000908:	e7fe      	b.n	8000908 <Error_Handler+0x8>

0800090a <MLX90614_Init>:
#include "mlx90614.h"

HAL_StatusTypeDef MLX90614_Init(I2C_HandleTypeDef * hi2c) {
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
  // Initialization code for MLX90614 (if needed)
  // Example: Set operational mode, configure resolution, etc.
  // Return HAL_OK if initialization is successful, otherwise HAL_ERROR
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <MLX90614_ReadTemp>:

float MLX90614_ReadTemp(I2C_HandleTypeDef * hi2c) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af04      	add	r7, sp, #16
 8000926:	6078      	str	r0, [r7, #4]
  uint8_t data[3] = {
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MLX90614_ReadTemp+0x78>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	81bb      	strh	r3, [r7, #12]
 800092e:	2300      	movs	r3, #0
 8000930:	73bb      	strb	r3, [r7, #14]
  };
  uint16_t rawTemp;
  float temp;

  // Read ambient temperature from MLX90614
  if (HAL_I2C_Mem_Read(hi2c, MLX90614_DEFAULT_ADDR << 1, MLX90614_TA, I2C_MEMADD_SIZE_8BIT, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK) {
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	9302      	str	r3, [sp, #8]
 8000938:	2303      	movs	r3, #3
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2206      	movs	r2, #6
 8000946:	21b4      	movs	r1, #180	; 0xb4
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f001 fa03 	bl	8001d54 <HAL_I2C_Mem_Read>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MLX90614_ReadTemp+0x38>
    // Error handling if read fails
    return -1.0f;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MLX90614_ReadTemp+0x7c>)
 8000956:	e017      	b.n	8000988 <MLX90614_ReadTemp+0x68>
  }

  rawTemp = (data[1] << 8) | data[0]; // Combine MSB and LSB
 8000958:	7b7b      	ldrb	r3, [r7, #13]
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	b21a      	sxth	r2, r3
 800095e:	7b3b      	ldrb	r3, [r7, #12]
 8000960:	b21b      	sxth	r3, r3
 8000962:	4313      	orrs	r3, r2
 8000964:	b21b      	sxth	r3, r3
 8000966:	82fb      	strh	r3, [r7, #22]
  temp = (float) rawTemp * 0.02f - 273.15f; // Calculate temperature in Celsius
 8000968:	8afb      	ldrh	r3, [r7, #22]
 800096a:	ee07 3a90 	vmov	s15, r3
 800096e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000972:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80009a0 <MLX90614_ReadTemp+0x80>
 8000976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800097a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80009a4 <MLX90614_ReadTemp+0x84>
 800097e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000982:	edc7 7a04 	vstr	s15, [r7, #16]

  return temp;
 8000986:	693b      	ldr	r3, [r7, #16]
}
 8000988:	ee07 3a90 	vmov	s15, r3
 800098c:	eeb0 0a67 	vmov.f32	s0, s15
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	08004618 	.word	0x08004618
 800099c:	bf800000 	.word	0xbf800000
 80009a0:	3ca3d70a 	.word	0x3ca3d70a
 80009a4:	43889333 	.word	0x43889333

080009a8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80009ae:	f000 fa21 	bl	8000df4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80009b2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80009b6:	2201      	movs	r2, #1
 80009b8:	2178      	movs	r1, #120	; 0x78
 80009ba:	485b      	ldr	r0, [pc, #364]	; (8000b28 <SSD1306_Init+0x180>)
 80009bc:	f001 fbfc 	bl	80021b8 <HAL_I2C_IsDeviceReady>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	e0a9      	b.n	8000b1e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80009ca:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80009ce:	607b      	str	r3, [r7, #4]
	while(p>0)
 80009d0:	e002      	b.n	80009d8 <SSD1306_Init+0x30>
		p--;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1f9      	bne.n	80009d2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80009de:	22ae      	movs	r2, #174	; 0xae
 80009e0:	2100      	movs	r1, #0
 80009e2:	2078      	movs	r0, #120	; 0x78
 80009e4:	f000 fa82 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80009e8:	2220      	movs	r2, #32
 80009ea:	2100      	movs	r1, #0
 80009ec:	2078      	movs	r0, #120	; 0x78
 80009ee:	f000 fa7d 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80009f2:	2210      	movs	r2, #16
 80009f4:	2100      	movs	r1, #0
 80009f6:	2078      	movs	r0, #120	; 0x78
 80009f8:	f000 fa78 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80009fc:	22b0      	movs	r2, #176	; 0xb0
 80009fe:	2100      	movs	r1, #0
 8000a00:	2078      	movs	r0, #120	; 0x78
 8000a02:	f000 fa73 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000a06:	22c8      	movs	r2, #200	; 0xc8
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2078      	movs	r0, #120	; 0x78
 8000a0c:	f000 fa6e 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	2078      	movs	r0, #120	; 0x78
 8000a16:	f000 fa69 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000a1a:	2210      	movs	r2, #16
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2078      	movs	r0, #120	; 0x78
 8000a20:	f000 fa64 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000a24:	2240      	movs	r2, #64	; 0x40
 8000a26:	2100      	movs	r1, #0
 8000a28:	2078      	movs	r0, #120	; 0x78
 8000a2a:	f000 fa5f 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000a2e:	2281      	movs	r2, #129	; 0x81
 8000a30:	2100      	movs	r1, #0
 8000a32:	2078      	movs	r0, #120	; 0x78
 8000a34:	f000 fa5a 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000a38:	22ff      	movs	r2, #255	; 0xff
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2078      	movs	r0, #120	; 0x78
 8000a3e:	f000 fa55 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000a42:	22a1      	movs	r2, #161	; 0xa1
 8000a44:	2100      	movs	r1, #0
 8000a46:	2078      	movs	r0, #120	; 0x78
 8000a48:	f000 fa50 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000a4c:	22a6      	movs	r2, #166	; 0xa6
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2078      	movs	r0, #120	; 0x78
 8000a52:	f000 fa4b 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000a56:	22a8      	movs	r2, #168	; 0xa8
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2078      	movs	r0, #120	; 0x78
 8000a5c:	f000 fa46 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000a60:	223f      	movs	r2, #63	; 0x3f
 8000a62:	2100      	movs	r1, #0
 8000a64:	2078      	movs	r0, #120	; 0x78
 8000a66:	f000 fa41 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a6a:	22a4      	movs	r2, #164	; 0xa4
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2078      	movs	r0, #120	; 0x78
 8000a70:	f000 fa3c 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000a74:	22d3      	movs	r2, #211	; 0xd3
 8000a76:	2100      	movs	r1, #0
 8000a78:	2078      	movs	r0, #120	; 0x78
 8000a7a:	f000 fa37 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	2078      	movs	r0, #120	; 0x78
 8000a84:	f000 fa32 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000a88:	22d5      	movs	r2, #213	; 0xd5
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2078      	movs	r0, #120	; 0x78
 8000a8e:	f000 fa2d 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000a92:	22f0      	movs	r2, #240	; 0xf0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2078      	movs	r0, #120	; 0x78
 8000a98:	f000 fa28 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000a9c:	22d9      	movs	r2, #217	; 0xd9
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2078      	movs	r0, #120	; 0x78
 8000aa2:	f000 fa23 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000aa6:	2222      	movs	r2, #34	; 0x22
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2078      	movs	r0, #120	; 0x78
 8000aac:	f000 fa1e 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000ab0:	22da      	movs	r2, #218	; 0xda
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2078      	movs	r0, #120	; 0x78
 8000ab6:	f000 fa19 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000aba:	2212      	movs	r2, #18
 8000abc:	2100      	movs	r1, #0
 8000abe:	2078      	movs	r0, #120	; 0x78
 8000ac0:	f000 fa14 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000ac4:	22db      	movs	r2, #219	; 0xdb
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2078      	movs	r0, #120	; 0x78
 8000aca:	f000 fa0f 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000ace:	2220      	movs	r2, #32
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2078      	movs	r0, #120	; 0x78
 8000ad4:	f000 fa0a 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000ad8:	228d      	movs	r2, #141	; 0x8d
 8000ada:	2100      	movs	r1, #0
 8000adc:	2078      	movs	r0, #120	; 0x78
 8000ade:	f000 fa05 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000ae2:	2214      	movs	r2, #20
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2078      	movs	r0, #120	; 0x78
 8000ae8:	f000 fa00 	bl	8000eec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000aec:	22af      	movs	r2, #175	; 0xaf
 8000aee:	2100      	movs	r1, #0
 8000af0:	2078      	movs	r0, #120	; 0x78
 8000af2:	f000 f9fb 	bl	8000eec <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000af6:	222e      	movs	r2, #46	; 0x2e
 8000af8:	2100      	movs	r1, #0
 8000afa:	2078      	movs	r0, #120	; 0x78
 8000afc:	f000 f9f6 	bl	8000eec <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 f843 	bl	8000b8c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000b06:	f000 f813 	bl	8000b30 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <SSD1306_Init+0x184>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <SSD1306_Init+0x184>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000b16:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <SSD1306_Init+0x184>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000b1c:	2301      	movs	r3, #1
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000080 	.word	0x20000080
 8000b2c:	20000570 	.word	0x20000570

08000b30 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000b36:	2300      	movs	r3, #0
 8000b38:	71fb      	strb	r3, [r7, #7]
 8000b3a:	e01d      	b.n	8000b78 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	3b50      	subs	r3, #80	; 0x50
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	461a      	mov	r2, r3
 8000b44:	2100      	movs	r1, #0
 8000b46:	2078      	movs	r0, #120	; 0x78
 8000b48:	f000 f9d0 	bl	8000eec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2078      	movs	r0, #120	; 0x78
 8000b52:	f000 f9cb 	bl	8000eec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000b56:	2210      	movs	r2, #16
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2078      	movs	r0, #120	; 0x78
 8000b5c:	f000 f9c6 	bl	8000eec <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	01db      	lsls	r3, r3, #7
 8000b64:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <SSD1306_UpdateScreen+0x58>)
 8000b66:	441a      	add	r2, r3
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	2140      	movs	r1, #64	; 0x40
 8000b6c:	2078      	movs	r0, #120	; 0x78
 8000b6e:	f000 f957 	bl	8000e20 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	3301      	adds	r3, #1
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	2b07      	cmp	r3, #7
 8000b7c:	d9de      	bls.n	8000b3c <SSD1306_UpdateScreen+0xc>
	}
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000170 	.word	0x20000170

08000b8c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d101      	bne.n	8000ba0 <SSD1306_Fill+0x14>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	e000      	b.n	8000ba2 <SSD1306_Fill+0x16>
 8000ba0:	23ff      	movs	r3, #255	; 0xff
 8000ba2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <SSD1306_Fill+0x2c>)
 8000baa:	f003 f89f 	bl	8003cec <memset>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000170 	.word	0x20000170

08000bbc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	80bb      	strh	r3, [r7, #4]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	70fb      	strb	r3, [r7, #3]
	if (
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd2:	d848      	bhi.n	8000c66 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000bd4:	88bb      	ldrh	r3, [r7, #4]
 8000bd6:	2b3f      	cmp	r3, #63	; 0x3f
 8000bd8:	d845      	bhi.n	8000c66 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000bda:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <SSD1306_DrawPixel+0xb8>)
 8000bdc:	791b      	ldrb	r3, [r3, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d006      	beq.n	8000bf0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000be2:	78fb      	ldrb	r3, [r7, #3]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	bf0c      	ite	eq
 8000be8:	2301      	moveq	r3, #1
 8000bea:	2300      	movne	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d11a      	bne.n	8000c2c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000bf6:	88fa      	ldrh	r2, [r7, #6]
 8000bf8:	88bb      	ldrh	r3, [r7, #4]
 8000bfa:	08db      	lsrs	r3, r3, #3
 8000bfc:	b298      	uxth	r0, r3
 8000bfe:	4603      	mov	r3, r0
 8000c00:	01db      	lsls	r3, r3, #7
 8000c02:	4413      	add	r3, r2
 8000c04:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <SSD1306_DrawPixel+0xbc>)
 8000c06:	5cd3      	ldrb	r3, [r2, r3]
 8000c08:	b25a      	sxtb	r2, r3
 8000c0a:	88bb      	ldrh	r3, [r7, #4]
 8000c0c:	f003 0307 	and.w	r3, r3, #7
 8000c10:	2101      	movs	r1, #1
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	b259      	sxtb	r1, r3
 8000c1c:	88fa      	ldrh	r2, [r7, #6]
 8000c1e:	4603      	mov	r3, r0
 8000c20:	01db      	lsls	r3, r3, #7
 8000c22:	4413      	add	r3, r2
 8000c24:	b2c9      	uxtb	r1, r1
 8000c26:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <SSD1306_DrawPixel+0xbc>)
 8000c28:	54d1      	strb	r1, [r2, r3]
 8000c2a:	e01d      	b.n	8000c68 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c2c:	88fa      	ldrh	r2, [r7, #6]
 8000c2e:	88bb      	ldrh	r3, [r7, #4]
 8000c30:	08db      	lsrs	r3, r3, #3
 8000c32:	b298      	uxth	r0, r3
 8000c34:	4603      	mov	r3, r0
 8000c36:	01db      	lsls	r3, r3, #7
 8000c38:	4413      	add	r3, r2
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <SSD1306_DrawPixel+0xbc>)
 8000c3c:	5cd3      	ldrb	r3, [r2, r3]
 8000c3e:	b25a      	sxtb	r2, r3
 8000c40:	88bb      	ldrh	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	2101      	movs	r1, #1
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	b25b      	sxtb	r3, r3
 8000c52:	4013      	ands	r3, r2
 8000c54:	b259      	sxtb	r1, r3
 8000c56:	88fa      	ldrh	r2, [r7, #6]
 8000c58:	4603      	mov	r3, r0
 8000c5a:	01db      	lsls	r3, r3, #7
 8000c5c:	4413      	add	r3, r2
 8000c5e:	b2c9      	uxtb	r1, r1
 8000c60:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <SSD1306_DrawPixel+0xbc>)
 8000c62:	54d1      	strb	r1, [r2, r3]
 8000c64:	e000      	b.n	8000c68 <SSD1306_DrawPixel+0xac>
		return;
 8000c66:	bf00      	nop
	}
}
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000570 	.word	0x20000570
 8000c78:	20000170 	.word	0x20000170

08000c7c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	460a      	mov	r2, r1
 8000c86:	80fb      	strh	r3, [r7, #6]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000c8c:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <SSD1306_GotoXY+0x28>)
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <SSD1306_GotoXY+0x28>)
 8000c94:	88bb      	ldrh	r3, [r7, #4]
 8000c96:	8053      	strh	r3, [r2, #2]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	20000570 	.word	0x20000570

08000ca8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000cb8:	4b3a      	ldr	r3, [pc, #232]	; (8000da4 <SSD1306_Putc+0xfc>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
	if (
 8000cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8000cc6:	dc07      	bgt.n	8000cd8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000cc8:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <SSD1306_Putc+0xfc>)
 8000cca:	885b      	ldrh	r3, [r3, #2]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	785b      	ldrb	r3, [r3, #1]
 8000cd2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000cd4:	2b3f      	cmp	r3, #63	; 0x3f
 8000cd6:	dd01      	ble.n	8000cdc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	e05e      	b.n	8000d9a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	e04b      	b.n	8000d7a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	3b20      	subs	r3, #32
 8000cea:	6839      	ldr	r1, [r7, #0]
 8000cec:	7849      	ldrb	r1, [r1, #1]
 8000cee:	fb01 f303 	mul.w	r3, r1, r3
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	440b      	add	r3, r1
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	e030      	b.n	8000d68 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d010      	beq.n	8000d38 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000d16:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <SSD1306_Putc+0xfc>)
 8000d18:	881a      	ldrh	r2, [r3, #0]
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	4413      	add	r3, r2
 8000d20:	b298      	uxth	r0, r3
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <SSD1306_Putc+0xfc>)
 8000d24:	885a      	ldrh	r2, [r3, #2]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	79ba      	ldrb	r2, [r7, #6]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f7ff ff43 	bl	8000bbc <SSD1306_DrawPixel>
 8000d36:	e014      	b.n	8000d62 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000d38:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <SSD1306_Putc+0xfc>)
 8000d3a:	881a      	ldrh	r2, [r3, #0]
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	4413      	add	r3, r2
 8000d42:	b298      	uxth	r0, r3
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <SSD1306_Putc+0xfc>)
 8000d46:	885a      	ldrh	r2, [r3, #2]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b299      	uxth	r1, r3
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bf0c      	ite	eq
 8000d56:	2301      	moveq	r3, #1
 8000d58:	2300      	movne	r3, #0
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	f7ff ff2d 	bl	8000bbc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	3301      	adds	r3, #1
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d3c8      	bcc.n	8000d06 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3301      	adds	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	785b      	ldrb	r3, [r3, #1]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d3ad      	bcc.n	8000ce2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <SSD1306_Putc+0xfc>)
 8000d88:	881a      	ldrh	r2, [r3, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <SSD1306_Putc+0xfc>)
 8000d96:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000d98:	79fb      	ldrb	r3, [r7, #7]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000570 	.word	0x20000570

08000da8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	4613      	mov	r3, r2
 8000db4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000db6:	e012      	b.n	8000dde <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	79fa      	ldrb	r2, [r7, #7]
 8000dbe:	68b9      	ldr	r1, [r7, #8]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff71 	bl	8000ca8 <SSD1306_Putc>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d002      	beq.n	8000dd8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	e008      	b.n	8000dea <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1e8      	bne.n	8000db8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	781b      	ldrb	r3, [r3, #0]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <ssd1306_I2C_Init+0x28>)
 8000dfc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000dfe:	e002      	b.n	8000e06 <ssd1306_I2C_Init+0x12>
		p--;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1f9      	bne.n	8000e00 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	0003d090 	.word	0x0003d090

08000e20 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b0c7      	sub	sp, #284	; 0x11c
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	4604      	mov	r4, r0
 8000e28:	4608      	mov	r0, r1
 8000e2a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000e2e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000e32:	600a      	str	r2, [r1, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e3a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000e3e:	4622      	mov	r2, r4
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e46:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e56:	460a      	mov	r2, r1
 8000e58:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000e5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000e62:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000e66:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000e6a:	7812      	ldrb	r2, [r2, #0]
 8000e6c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000e74:	e015      	b.n	8000ea2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000e76:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000e7a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000e7e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000e82:	6812      	ldr	r2, [r2, #0]
 8000e84:	441a      	add	r2, r3
 8000e86:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	7811      	ldrb	r1, [r2, #0]
 8000e8e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000e92:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000e96:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000e98:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ea2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000eac:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000eb0:	8812      	ldrh	r2, [r2, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d8df      	bhi.n	8000e76 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000eb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000eba:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b299      	uxth	r1, r3
 8000ec2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ec6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	f107 020c 	add.w	r2, r7, #12
 8000ed4:	200a      	movs	r0, #10
 8000ed6:	9000      	str	r0, [sp, #0]
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <ssd1306_I2C_WriteMulti+0xc8>)
 8000eda:	f000 fe3d 	bl	8001b58 <HAL_I2C_Master_Transmit>
}
 8000ede:	bf00      	nop
 8000ee0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd90      	pop	{r4, r7, pc}
 8000ee8:	20000080 	.word	0x20000080

08000eec <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	71bb      	strb	r3, [r7, #6]
 8000efa:	4613      	mov	r3, r2
 8000efc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000efe:	79bb      	ldrb	r3, [r7, #6]
 8000f00:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000f02:	797b      	ldrb	r3, [r7, #5]
 8000f04:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	b299      	uxth	r1, r3
 8000f0a:	f107 020c 	add.w	r2, r7, #12
 8000f0e:	230a      	movs	r3, #10
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2302      	movs	r3, #2
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <ssd1306_I2C_Write+0x38>)
 8000f16:	f000 fe1f 	bl	8001b58 <HAL_I2C_Master_Transmit>
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000080 	.word	0x20000080

08000f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f66:	2007      	movs	r0, #7
 8000f68:	f000 fad0 	bl	800150c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800

08000f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08c      	sub	sp, #48	; 0x30
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a42      	ldr	r2, [pc, #264]	; (80010a0 <HAL_I2C_MspInit+0x128>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d12c      	bne.n	8000ff4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	4b41      	ldr	r3, [pc, #260]	; (80010a4 <HAL_I2C_MspInit+0x12c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a40      	ldr	r2, [pc, #256]	; (80010a4 <HAL_I2C_MspInit+0x12c>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <HAL_I2C_MspInit+0x12c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	61bb      	str	r3, [r7, #24]
 8000fb4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fb6:	23c0      	movs	r3, #192	; 0xc0
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fba:	2312      	movs	r3, #18
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4835      	ldr	r0, [pc, #212]	; (80010a8 <HAL_I2C_MspInit+0x130>)
 8000fd2:	f000 facf 	bl	8001574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <HAL_I2C_MspInit+0x12c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	4a31      	ldr	r2, [pc, #196]	; (80010a4 <HAL_I2C_MspInit+0x12c>)
 8000fe0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <HAL_I2C_MspInit+0x12c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ff2:	e050      	b.n	8001096 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a2c      	ldr	r2, [pc, #176]	; (80010ac <HAL_I2C_MspInit+0x134>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d14b      	bne.n	8001096 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <HAL_I2C_MspInit+0x12c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <HAL_I2C_MspInit+0x12c>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <HAL_I2C_MspInit+0x12c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <HAL_I2C_MspInit+0x12c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a20      	ldr	r2, [pc, #128]	; (80010a4 <HAL_I2C_MspInit+0x12c>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <HAL_I2C_MspInit+0x12c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800103a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103c:	2312      	movs	r3, #18
 800103e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001048:	2304      	movs	r3, #4
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	4619      	mov	r1, r3
 8001052:	4815      	ldr	r0, [pc, #84]	; (80010a8 <HAL_I2C_MspInit+0x130>)
 8001054:	f000 fa8e 	bl	8001574 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800105e:	2312      	movs	r3, #18
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800106a:	2304      	movs	r3, #4
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	480e      	ldr	r0, [pc, #56]	; (80010b0 <HAL_I2C_MspInit+0x138>)
 8001076:	f000 fa7d 	bl	8001574 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_I2C_MspInit+0x12c>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <HAL_I2C_MspInit+0x12c>)
 8001084:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_I2C_MspInit+0x12c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
}
 8001096:	bf00      	nop
 8001098:	3730      	adds	r7, #48	; 0x30
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40005400 	.word	0x40005400
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40005800 	.word	0x40005800
 80010b0:	40020800 	.word	0x40020800

080010b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a19      	ldr	r2, [pc, #100]	; (8001138 <HAL_UART_MspInit+0x84>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d12b      	bne.n	800112e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_UART_MspInit+0x88>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a17      	ldr	r2, [pc, #92]	; (800113c <HAL_UART_MspInit+0x88>)
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_UART_MspInit+0x88>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_UART_MspInit+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a10      	ldr	r2, [pc, #64]	; (800113c <HAL_UART_MspInit+0x88>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_UART_MspInit+0x88>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800110e:	230c      	movs	r3, #12
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800111e:	2307      	movs	r3, #7
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <HAL_UART_MspInit+0x8c>)
 800112a:	f000 fa23 	bl	8001574 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	; 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40004400 	.word	0x40004400
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000

08001144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001148:	e7fe      	b.n	8001148 <NMI_Handler+0x4>

0800114a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <MemManage_Handler+0x4>

08001156 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <BusFault_Handler+0x4>

0800115c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <UsageFault_Handler+0x4>

08001162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001190:	f000 f8c6 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a0:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <_sbrk+0x5c>)
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <_sbrk+0x60>)
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <_sbrk+0x64>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <_sbrk+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d207      	bcs.n	80011d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c8:	f002 fd98 	bl	8003cfc <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	220c      	movs	r2, #12
 80011d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	e009      	b.n	80011ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <_sbrk+0x64>)
 80011e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20020000 	.word	0x20020000
 80011f8:	00000400 	.word	0x00000400
 80011fc:	20000578 	.word	0x20000578
 8001200:	200006c8 	.word	0x200006c8

08001204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <SystemInit+0x20>)
 800120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <SystemInit+0x20>)
 8001210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001260 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800122c:	f7ff ffea 	bl	8001204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001232:	490d      	ldr	r1, [pc, #52]	; (8001268 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001234:	4a0d      	ldr	r2, [pc, #52]	; (800126c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001248:	4c0a      	ldr	r4, [pc, #40]	; (8001274 <LoopFillZerobss+0x22>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001256:	f002 fd57 	bl	8003d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125a:	f7ff f9a7 	bl	80005ac <main>
  bx  lr    
 800125e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800126c:	080053d4 	.word	0x080053d4
  ldr r2, =_sbss
 8001270:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001274:	200006c8 	.word	0x200006c8

08001278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC_IRQHandler>
	...

0800127c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <HAL_Init+0x40>)
 8001286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <HAL_Init+0x40>)
 8001292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a07      	ldr	r2, [pc, #28]	; (80012bc <HAL_Init+0x40>)
 800129e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 f931 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f000 f808 	bl	80012c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b0:	f7ff fe3a 	bl	8000f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023c00 	.word	0x40023c00

080012c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_InitTick+0x54>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_InitTick+0x58>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f93b 	bl	800155a <HAL_SYSTICK_Config>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00e      	b.n	800130c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d80a      	bhi.n	800130a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f000 f911 	bl	8001522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <HAL_InitTick+0x5c>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000008 	.word	0x20000008
 8001318:	20000010 	.word	0x20000010
 800131c:	2000000c 	.word	0x2000000c

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000010 	.word	0x20000010
 8001344:	2000057c 	.word	0x2000057c

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2000057c 	.word	0x2000057c

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff ffee 	bl	8001348 <HAL_GetTick>
 800136c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001378:	d005      	beq.n	8001386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <HAL_Delay+0x44>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001386:	bf00      	nop
 8001388:	f7ff ffde 	bl	8001348 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8f7      	bhi.n	8001388 <HAL_Delay+0x28>
  {
  }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000010 	.word	0x20000010

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	; (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	; (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d8:	d301      	bcc.n	80014de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2301      	movs	r3, #1
 80014dc:	e00f      	b.n	80014fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <SysTick_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e6:	210f      	movs	r1, #15
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f7ff ff8e 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <SysTick_Config+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <SysTick_Config+0x40>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff47 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001534:	f7ff ff5c 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 8001538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff ff8e 	bl	8001460 <NVIC_EncodePriority>
 8001544:	4602      	mov	r2, r0
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff5d 	bl	800140c <__NVIC_SetPriority>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ffb0 	bl	80014c8 <SysTick_Config>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e165      	b.n	800185c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001590:	2201      	movs	r2, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	f040 8154 	bne.w	8001856 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d005      	beq.n	80015c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d130      	bne.n	8001628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2203      	movs	r2, #3
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015fc:	2201      	movs	r2, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 0201 	and.w	r2, r3, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b03      	cmp	r3, #3
 8001632:	d017      	beq.n	8001664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d123      	bne.n	80016b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	08da      	lsrs	r2, r3, #3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3208      	adds	r2, #8
 8001678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	08da      	lsrs	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3208      	adds	r2, #8
 80016b2:	69b9      	ldr	r1, [r7, #24]
 80016b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	2203      	movs	r2, #3
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0203 	and.w	r2, r3, #3
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80ae 	beq.w	8001856 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <HAL_GPIO_Init+0x300>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a5c      	ldr	r2, [pc, #368]	; (8001874 <HAL_GPIO_Init+0x300>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b5a      	ldr	r3, [pc, #360]	; (8001874 <HAL_GPIO_Init+0x300>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001716:	4a58      	ldr	r2, [pc, #352]	; (8001878 <HAL_GPIO_Init+0x304>)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4f      	ldr	r2, [pc, #316]	; (800187c <HAL_GPIO_Init+0x308>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d025      	beq.n	800178e <HAL_GPIO_Init+0x21a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4e      	ldr	r2, [pc, #312]	; (8001880 <HAL_GPIO_Init+0x30c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d01f      	beq.n	800178a <HAL_GPIO_Init+0x216>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4d      	ldr	r2, [pc, #308]	; (8001884 <HAL_GPIO_Init+0x310>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d019      	beq.n	8001786 <HAL_GPIO_Init+0x212>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4c      	ldr	r2, [pc, #304]	; (8001888 <HAL_GPIO_Init+0x314>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_GPIO_Init+0x20e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4b      	ldr	r2, [pc, #300]	; (800188c <HAL_GPIO_Init+0x318>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00d      	beq.n	800177e <HAL_GPIO_Init+0x20a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4a      	ldr	r2, [pc, #296]	; (8001890 <HAL_GPIO_Init+0x31c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d007      	beq.n	800177a <HAL_GPIO_Init+0x206>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a49      	ldr	r2, [pc, #292]	; (8001894 <HAL_GPIO_Init+0x320>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <HAL_GPIO_Init+0x202>
 8001772:	2306      	movs	r3, #6
 8001774:	e00c      	b.n	8001790 <HAL_GPIO_Init+0x21c>
 8001776:	2307      	movs	r3, #7
 8001778:	e00a      	b.n	8001790 <HAL_GPIO_Init+0x21c>
 800177a:	2305      	movs	r3, #5
 800177c:	e008      	b.n	8001790 <HAL_GPIO_Init+0x21c>
 800177e:	2304      	movs	r3, #4
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x21c>
 8001782:	2303      	movs	r3, #3
 8001784:	e004      	b.n	8001790 <HAL_GPIO_Init+0x21c>
 8001786:	2302      	movs	r3, #2
 8001788:	e002      	b.n	8001790 <HAL_GPIO_Init+0x21c>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x21c>
 800178e:	2300      	movs	r3, #0
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	f002 0203 	and.w	r2, r2, #3
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	4093      	lsls	r3, r2
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a0:	4935      	ldr	r1, [pc, #212]	; (8001878 <HAL_GPIO_Init+0x304>)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ae:	4b3a      	ldr	r3, [pc, #232]	; (8001898 <HAL_GPIO_Init+0x324>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017d2:	4a31      	ldr	r2, [pc, #196]	; (8001898 <HAL_GPIO_Init+0x324>)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d8:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_GPIO_Init+0x324>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017fc:	4a26      	ldr	r2, [pc, #152]	; (8001898 <HAL_GPIO_Init+0x324>)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <HAL_GPIO_Init+0x324>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001826:	4a1c      	ldr	r2, [pc, #112]	; (8001898 <HAL_GPIO_Init+0x324>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_GPIO_Init+0x324>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001850:	4a11      	ldr	r2, [pc, #68]	; (8001898 <HAL_GPIO_Init+0x324>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3301      	adds	r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b0f      	cmp	r3, #15
 8001860:	f67f ae96 	bls.w	8001590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40013800 	.word	0x40013800
 800187c:	40020000 	.word	0x40020000
 8001880:	40020400 	.word	0x40020400
 8001884:	40020800 	.word	0x40020800
 8001888:	40020c00 	.word	0x40020c00
 800188c:	40021000 	.word	0x40021000
 8001890:	40021400 	.word	0x40021400
 8001894:	40021800 	.word	0x40021800
 8001898:	40013c00 	.word	0x40013c00

0800189c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	807b      	strh	r3, [r7, #2]
 80018a8:	4613      	mov	r3, r2
 80018aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018ac:	787b      	ldrb	r3, [r7, #1]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b2:	887a      	ldrh	r2, [r7, #2]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018b8:	e003      	b.n	80018c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ba:	887b      	ldrh	r3, [r7, #2]
 80018bc:	041a      	lsls	r2, r3, #16
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	619a      	str	r2, [r3, #24]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e12b      	b.n	8001b3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d106      	bne.n	80018fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fb3e 	bl	8000f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2224      	movs	r2, #36	; 0x24
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001922:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001932:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001934:	f001 fa00 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 8001938:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4a81      	ldr	r2, [pc, #516]	; (8001b44 <HAL_I2C_Init+0x274>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d807      	bhi.n	8001954 <HAL_I2C_Init+0x84>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4a80      	ldr	r2, [pc, #512]	; (8001b48 <HAL_I2C_Init+0x278>)
 8001948:	4293      	cmp	r3, r2
 800194a:	bf94      	ite	ls
 800194c:	2301      	movls	r3, #1
 800194e:	2300      	movhi	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	e006      	b.n	8001962 <HAL_I2C_Init+0x92>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4a7d      	ldr	r2, [pc, #500]	; (8001b4c <HAL_I2C_Init+0x27c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	bf94      	ite	ls
 800195c:	2301      	movls	r3, #1
 800195e:	2300      	movhi	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e0e7      	b.n	8001b3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4a78      	ldr	r2, [pc, #480]	; (8001b50 <HAL_I2C_Init+0x280>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0c9b      	lsrs	r3, r3, #18
 8001974:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	430a      	orrs	r2, r1
 8001988:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4a6a      	ldr	r2, [pc, #424]	; (8001b44 <HAL_I2C_Init+0x274>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d802      	bhi.n	80019a4 <HAL_I2C_Init+0xd4>
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	3301      	adds	r3, #1
 80019a2:	e009      	b.n	80019b8 <HAL_I2C_Init+0xe8>
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	4a69      	ldr	r2, [pc, #420]	; (8001b54 <HAL_I2C_Init+0x284>)
 80019b0:	fba2 2303 	umull	r2, r3, r2, r3
 80019b4:	099b      	lsrs	r3, r3, #6
 80019b6:	3301      	adds	r3, #1
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	430b      	orrs	r3, r1
 80019be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	495c      	ldr	r1, [pc, #368]	; (8001b44 <HAL_I2C_Init+0x274>)
 80019d4:	428b      	cmp	r3, r1
 80019d6:	d819      	bhi.n	8001a0c <HAL_I2C_Init+0x13c>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1e59      	subs	r1, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80019e6:	1c59      	adds	r1, r3, #1
 80019e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019ec:	400b      	ands	r3, r1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00a      	beq.n	8001a08 <HAL_I2C_Init+0x138>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1e59      	subs	r1, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a00:	3301      	adds	r3, #1
 8001a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a06:	e051      	b.n	8001aac <HAL_I2C_Init+0x1dc>
 8001a08:	2304      	movs	r3, #4
 8001a0a:	e04f      	b.n	8001aac <HAL_I2C_Init+0x1dc>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d111      	bne.n	8001a38 <HAL_I2C_Init+0x168>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	1e58      	subs	r0, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6859      	ldr	r1, [r3, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	440b      	add	r3, r1
 8001a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a26:	3301      	adds	r3, #1
 8001a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bf0c      	ite	eq
 8001a30:	2301      	moveq	r3, #1
 8001a32:	2300      	movne	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	e012      	b.n	8001a5e <HAL_I2C_Init+0x18e>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1e58      	subs	r0, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6859      	ldr	r1, [r3, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	0099      	lsls	r1, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf0c      	ite	eq
 8001a58:	2301      	moveq	r3, #1
 8001a5a:	2300      	movne	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_I2C_Init+0x196>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e022      	b.n	8001aac <HAL_I2C_Init+0x1dc>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10e      	bne.n	8001a8c <HAL_I2C_Init+0x1bc>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1e58      	subs	r0, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6859      	ldr	r1, [r3, #4]
 8001a76:	460b      	mov	r3, r1
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	440b      	add	r3, r1
 8001a7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a80:	3301      	adds	r3, #1
 8001a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a8a:	e00f      	b.n	8001aac <HAL_I2C_Init+0x1dc>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1e58      	subs	r0, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6859      	ldr	r1, [r3, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	0099      	lsls	r1, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	6809      	ldr	r1, [r1, #0]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69da      	ldr	r2, [r3, #28]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ada:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6911      	ldr	r1, [r2, #16]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68d2      	ldr	r2, [r2, #12]
 8001ae6:	4311      	orrs	r1, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	430b      	orrs	r3, r1
 8001aee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695a      	ldr	r2, [r3, #20]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2220      	movs	r2, #32
 8001b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	000186a0 	.word	0x000186a0
 8001b48:	001e847f 	.word	0x001e847f
 8001b4c:	003d08ff 	.word	0x003d08ff
 8001b50:	431bde83 	.word	0x431bde83
 8001b54:	10624dd3 	.word	0x10624dd3

08001b58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	461a      	mov	r2, r3
 8001b64:	460b      	mov	r3, r1
 8001b66:	817b      	strh	r3, [r7, #10]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b6c:	f7ff fbec 	bl	8001348 <HAL_GetTick>
 8001b70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	f040 80e0 	bne.w	8001d40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2319      	movs	r3, #25
 8001b86:	2201      	movs	r2, #1
 8001b88:	4970      	ldr	r1, [pc, #448]	; (8001d4c <HAL_I2C_Master_Transmit+0x1f4>)
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 fdac 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b96:	2302      	movs	r3, #2
 8001b98:	e0d3      	b.n	8001d42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_I2C_Master_Transmit+0x50>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e0cc      	b.n	8001d42 <HAL_I2C_Master_Transmit+0x1ea>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d007      	beq.n	8001bce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0201 	orr.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2221      	movs	r2, #33	; 0x21
 8001be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2210      	movs	r2, #16
 8001bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	893a      	ldrh	r2, [r7, #8]
 8001bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4a50      	ldr	r2, [pc, #320]	; (8001d50 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c10:	8979      	ldrh	r1, [r7, #10]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	6a3a      	ldr	r2, [r7, #32]
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 fbfc 	bl	8002414 <I2C_MasterRequestWrite>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e08d      	b.n	8001d42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c3c:	e066      	b.n	8001d0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	6a39      	ldr	r1, [r7, #32]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 fe6a 	bl	800291c <I2C_WaitOnTXEFlagUntilTimeout>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00d      	beq.n	8001c6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d107      	bne.n	8001c66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e06b      	b.n	8001d42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	781a      	ldrb	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c92:	3b01      	subs	r3, #1
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d11b      	bne.n	8001ce0 <HAL_I2C_Master_Transmit+0x188>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d017      	beq.n	8001ce0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	781a      	ldrb	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	6a39      	ldr	r1, [r7, #32]
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 fe61 	bl	80029ac <I2C_WaitOnBTFFlagUntilTimeout>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00d      	beq.n	8001d0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d107      	bne.n	8001d08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e01a      	b.n	8001d42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d194      	bne.n	8001c3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e000      	b.n	8001d42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d40:	2302      	movs	r3, #2
  }
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	00100002 	.word	0x00100002
 8001d50:	ffff0000 	.word	0xffff0000

08001d54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	; 0x30
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	4608      	mov	r0, r1
 8001d5e:	4611      	mov	r1, r2
 8001d60:	461a      	mov	r2, r3
 8001d62:	4603      	mov	r3, r0
 8001d64:	817b      	strh	r3, [r7, #10]
 8001d66:	460b      	mov	r3, r1
 8001d68:	813b      	strh	r3, [r7, #8]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d6e:	f7ff faeb 	bl	8001348 <HAL_GetTick>
 8001d72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b20      	cmp	r3, #32
 8001d7e:	f040 8214 	bne.w	80021aa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	2319      	movs	r3, #25
 8001d88:	2201      	movs	r2, #1
 8001d8a:	497b      	ldr	r1, [pc, #492]	; (8001f78 <HAL_I2C_Mem_Read+0x224>)
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 fcab 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e207      	b.n	80021ac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_I2C_Mem_Read+0x56>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e200      	b.n	80021ac <HAL_I2C_Mem_Read+0x458>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d007      	beq.n	8001dd0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2222      	movs	r2, #34	; 0x22
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2240      	movs	r2, #64	; 0x40
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001e00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4a5b      	ldr	r2, [pc, #364]	; (8001f7c <HAL_I2C_Mem_Read+0x228>)
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e12:	88f8      	ldrh	r0, [r7, #6]
 8001e14:	893a      	ldrh	r2, [r7, #8]
 8001e16:	8979      	ldrh	r1, [r7, #10]
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	4603      	mov	r3, r0
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 fb78 	bl	8002518 <I2C_RequestMemoryRead>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e1bc      	b.n	80021ac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d113      	bne.n	8001e62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	623b      	str	r3, [r7, #32]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	623b      	str	r3, [r7, #32]
 8001e4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	e190      	b.n	8002184 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d11b      	bne.n	8001ea2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	e170      	b.n	8002184 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d11b      	bne.n	8001ee2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ec8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	61bb      	str	r3, [r7, #24]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	e150      	b.n	8002184 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ef8:	e144      	b.n	8002184 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	f200 80f1 	bhi.w	80020e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d123      	bne.n	8001f54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 fd93 	bl	8002a3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e145      	b.n	80021ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f52:	e117      	b.n	8002184 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d14e      	bne.n	8001ffa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f62:	2200      	movs	r2, #0
 8001f64:	4906      	ldr	r1, [pc, #24]	; (8001f80 <HAL_I2C_Mem_Read+0x22c>)
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fbbe 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d008      	beq.n	8001f84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e11a      	b.n	80021ac <HAL_I2C_Mem_Read+0x458>
 8001f76:	bf00      	nop
 8001f78:	00100002 	.word	0x00100002
 8001f7c:	ffff0000 	.word	0xffff0000
 8001f80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ff8:	e0c4      	b.n	8002184 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002000:	2200      	movs	r2, #0
 8002002:	496c      	ldr	r1, [pc, #432]	; (80021b4 <HAL_I2C_Mem_Read+0x460>)
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 fb6f 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0cb      	b.n	80021ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691a      	ldr	r2, [r3, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205c:	2200      	movs	r2, #0
 800205e:	4955      	ldr	r1, [pc, #340]	; (80021b4 <HAL_I2C_Mem_Read+0x460>)
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fb41 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e09d      	b.n	80021ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800207e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020da:	b29b      	uxth	r3, r3
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020e4:	e04e      	b.n	8002184 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 fca6 	bl	8002a3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e058      	b.n	80021ac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b04      	cmp	r3, #4
 8002138:	d124      	bne.n	8002184 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213e:	2b03      	cmp	r3, #3
 8002140:	d107      	bne.n	8002152 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002150:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	2b00      	cmp	r3, #0
 800218a:	f47f aeb6 	bne.w	8001efa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2220      	movs	r2, #32
 8002192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e000      	b.n	80021ac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80021aa:	2302      	movs	r3, #2
  }
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3728      	adds	r7, #40	; 0x28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	00010004 	.word	0x00010004

080021b8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af02      	add	r7, sp, #8
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	460b      	mov	r3, r1
 80021c6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80021c8:	f7ff f8be 	bl	8001348 <HAL_GetTick>
 80021cc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b20      	cmp	r3, #32
 80021dc:	f040 8111 	bne.w	8002402 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2319      	movs	r3, #25
 80021e6:	2201      	movs	r2, #1
 80021e8:	4988      	ldr	r1, [pc, #544]	; (800240c <HAL_I2C_IsDeviceReady+0x254>)
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fa7c 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80021f6:	2302      	movs	r3, #2
 80021f8:	e104      	b.n	8002404 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_I2C_IsDeviceReady+0x50>
 8002204:	2302      	movs	r3, #2
 8002206:	e0fd      	b.n	8002404 <HAL_I2C_IsDeviceReady+0x24c>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d007      	beq.n	800222e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0201 	orr.w	r2, r2, #1
 800222c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800223c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2224      	movs	r2, #36	; 0x24
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4a70      	ldr	r2, [pc, #448]	; (8002410 <HAL_I2C_IsDeviceReady+0x258>)
 8002250:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002260:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2200      	movs	r2, #0
 800226a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fa3a 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002288:	d103      	bne.n	8002292 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002290:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e0b6      	b.n	8002404 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002296:	897b      	ldrh	r3, [r7, #10]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022a4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80022a6:	f7ff f84f 	bl	8001348 <HAL_GetTick>
 80022aa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	bf0c      	ite	eq
 80022ba:	2301      	moveq	r3, #1
 80022bc:	2300      	movne	r3, #0
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d0:	bf0c      	ite	eq
 80022d2:	2301      	moveq	r3, #1
 80022d4:	2300      	movne	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022da:	e025      	b.n	8002328 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022dc:	f7ff f834 	bl	8001348 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d302      	bcc.n	80022f2 <HAL_I2C_IsDeviceReady+0x13a>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d103      	bne.n	80022fa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	22a0      	movs	r2, #160	; 0xa0
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b02      	cmp	r3, #2
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231e:	bf0c      	ite	eq
 8002320:	2301      	moveq	r3, #1
 8002322:	2300      	movne	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2ba0      	cmp	r3, #160	; 0xa0
 8002332:	d005      	beq.n	8002340 <HAL_I2C_IsDeviceReady+0x188>
 8002334:	7dfb      	ldrb	r3, [r7, #23]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <HAL_I2C_IsDeviceReady+0x188>
 800233a:	7dbb      	ldrb	r3, [r7, #22]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0cd      	beq.n	80022dc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d129      	bne.n	80023aa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002364:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	2319      	movs	r3, #25
 8002382:	2201      	movs	r2, #1
 8002384:	4921      	ldr	r1, [pc, #132]	; (800240c <HAL_I2C_IsDeviceReady+0x254>)
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f9ae 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e036      	b.n	8002404 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e02c      	b.n	8002404 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023c2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	2319      	movs	r3, #25
 80023ca:	2201      	movs	r2, #1
 80023cc:	490f      	ldr	r1, [pc, #60]	; (800240c <HAL_I2C_IsDeviceReady+0x254>)
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f98a 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e012      	b.n	8002404 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	3301      	adds	r3, #1
 80023e2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	f4ff af32 	bcc.w	8002252 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2220      	movs	r2, #32
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002402:	2302      	movs	r3, #2
  }
}
 8002404:	4618      	mov	r0, r3
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	00100002 	.word	0x00100002
 8002410:	ffff0000 	.word	0xffff0000

08002414 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	460b      	mov	r3, r1
 8002422:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b08      	cmp	r3, #8
 800242e:	d006      	beq.n	800243e <I2C_MasterRequestWrite+0x2a>
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d003      	beq.n	800243e <I2C_MasterRequestWrite+0x2a>
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800243c:	d108      	bne.n	8002450 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	e00b      	b.n	8002468 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	2b12      	cmp	r3, #18
 8002456:	d107      	bne.n	8002468 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002466:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f937 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00d      	beq.n	800249c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800248e:	d103      	bne.n	8002498 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002496:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e035      	b.n	8002508 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024a4:	d108      	bne.n	80024b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024a6:	897b      	ldrh	r3, [r7, #10]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024b4:	611a      	str	r2, [r3, #16]
 80024b6:	e01b      	b.n	80024f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024b8:	897b      	ldrh	r3, [r7, #10]
 80024ba:	11db      	asrs	r3, r3, #7
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f003 0306 	and.w	r3, r3, #6
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f063 030f 	orn	r3, r3, #15
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	490e      	ldr	r1, [pc, #56]	; (8002510 <I2C_MasterRequestWrite+0xfc>)
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f980 	bl	80027dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e010      	b.n	8002508 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024e6:	897b      	ldrh	r3, [r7, #10]
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	4907      	ldr	r1, [pc, #28]	; (8002514 <I2C_MasterRequestWrite+0x100>)
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f970 	bl	80027dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	00010008 	.word	0x00010008
 8002514:	00010002 	.word	0x00010002

08002518 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af02      	add	r7, sp, #8
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	4608      	mov	r0, r1
 8002522:	4611      	mov	r1, r2
 8002524:	461a      	mov	r2, r3
 8002526:	4603      	mov	r3, r0
 8002528:	817b      	strh	r3, [r7, #10]
 800252a:	460b      	mov	r3, r1
 800252c:	813b      	strh	r3, [r7, #8]
 800252e:	4613      	mov	r3, r2
 8002530:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002540:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002550:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	2200      	movs	r2, #0
 800255a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f8c2 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00d      	beq.n	8002586 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002578:	d103      	bne.n	8002582 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e0aa      	b.n	80026dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002586:	897b      	ldrh	r3, [r7, #10]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002594:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	6a3a      	ldr	r2, [r7, #32]
 800259a:	4952      	ldr	r1, [pc, #328]	; (80026e4 <I2C_RequestMemoryRead+0x1cc>)
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f91d 	bl	80027dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e097      	b.n	80026dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c4:	6a39      	ldr	r1, [r7, #32]
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f9a8 	bl	800291c <I2C_WaitOnTXEFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00d      	beq.n	80025ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d107      	bne.n	80025ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e076      	b.n	80026dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d105      	bne.n	8002600 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025f4:	893b      	ldrh	r3, [r7, #8]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	611a      	str	r2, [r3, #16]
 80025fe:	e021      	b.n	8002644 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002600:	893b      	ldrh	r3, [r7, #8]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	b29b      	uxth	r3, r3
 8002606:	b2da      	uxtb	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800260e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002610:	6a39      	ldr	r1, [r7, #32]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f982 	bl	800291c <I2C_WaitOnTXEFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00d      	beq.n	800263a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2b04      	cmp	r3, #4
 8002624:	d107      	bne.n	8002636 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002634:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e050      	b.n	80026dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800263a:	893b      	ldrh	r3, [r7, #8]
 800263c:	b2da      	uxtb	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002646:	6a39      	ldr	r1, [r7, #32]
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f967 	bl	800291c <I2C_WaitOnTXEFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00d      	beq.n	8002670 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	2b04      	cmp	r3, #4
 800265a:	d107      	bne.n	800266c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e035      	b.n	80026dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800267e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	2200      	movs	r2, #0
 8002688:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 f82b 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00d      	beq.n	80026b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a6:	d103      	bne.n	80026b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e013      	b.n	80026dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026b4:	897b      	ldrh	r3, [r7, #10]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	6a3a      	ldr	r2, [r7, #32]
 80026c8:	4906      	ldr	r1, [pc, #24]	; (80026e4 <I2C_RequestMemoryRead+0x1cc>)
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f886 	bl	80027dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	00010002 	.word	0x00010002

080026e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	4613      	mov	r3, r2
 80026f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026f8:	e048      	b.n	800278c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d044      	beq.n	800278c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002702:	f7fe fe21 	bl	8001348 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d302      	bcc.n	8002718 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d139      	bne.n	800278c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	0c1b      	lsrs	r3, r3, #16
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b01      	cmp	r3, #1
 8002720:	d10d      	bne.n	800273e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	43da      	mvns	r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	4013      	ands	r3, r2
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf0c      	ite	eq
 8002734:	2301      	moveq	r3, #1
 8002736:	2300      	movne	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	e00c      	b.n	8002758 <I2C_WaitOnFlagUntilTimeout+0x70>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	43da      	mvns	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	4013      	ands	r3, r2
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	429a      	cmp	r2, r3
 800275c:	d116      	bne.n	800278c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f043 0220 	orr.w	r2, r3, #32
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e023      	b.n	80027d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	0c1b      	lsrs	r3, r3, #16
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b01      	cmp	r3, #1
 8002794:	d10d      	bne.n	80027b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	43da      	mvns	r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	4013      	ands	r3, r2
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bf0c      	ite	eq
 80027a8:	2301      	moveq	r3, #1
 80027aa:	2300      	movne	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	e00c      	b.n	80027cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	43da      	mvns	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4013      	ands	r3, r2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d093      	beq.n	80026fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027ea:	e071      	b.n	80028d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fa:	d123      	bne.n	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800280a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002814:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	f043 0204 	orr.w	r2, r3, #4
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e067      	b.n	8002914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284a:	d041      	beq.n	80028d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284c:	f7fe fd7c 	bl	8001348 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	429a      	cmp	r2, r3
 800285a:	d302      	bcc.n	8002862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d136      	bne.n	80028d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	0c1b      	lsrs	r3, r3, #16
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d10c      	bne.n	8002886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	43da      	mvns	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4013      	ands	r3, r2
 8002878:	b29b      	uxth	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	bf14      	ite	ne
 800287e:	2301      	movne	r3, #1
 8002880:	2300      	moveq	r3, #0
 8002882:	b2db      	uxtb	r3, r3
 8002884:	e00b      	b.n	800289e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	43da      	mvns	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	4013      	ands	r3, r2
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	bf14      	ite	ne
 8002898:	2301      	movne	r3, #1
 800289a:	2300      	moveq	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d016      	beq.n	80028d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e021      	b.n	8002914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	0c1b      	lsrs	r3, r3, #16
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d10c      	bne.n	80028f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	43da      	mvns	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4013      	ands	r3, r2
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf14      	ite	ne
 80028ec:	2301      	movne	r3, #1
 80028ee:	2300      	moveq	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	e00b      	b.n	800290c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	43da      	mvns	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4013      	ands	r3, r2
 8002900:	b29b      	uxth	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf14      	ite	ne
 8002906:	2301      	movne	r3, #1
 8002908:	2300      	moveq	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	f47f af6d 	bne.w	80027ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002928:	e034      	b.n	8002994 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f8e3 	bl	8002af6 <I2C_IsAcknowledgeFailed>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e034      	b.n	80029a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d028      	beq.n	8002994 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002942:	f7fe fd01 	bl	8001348 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	429a      	cmp	r2, r3
 8002950:	d302      	bcc.n	8002958 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d11d      	bne.n	8002994 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002962:	2b80      	cmp	r3, #128	; 0x80
 8002964:	d016      	beq.n	8002994 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f043 0220 	orr.w	r2, r3, #32
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e007      	b.n	80029a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299e:	2b80      	cmp	r3, #128	; 0x80
 80029a0:	d1c3      	bne.n	800292a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029b8:	e034      	b.n	8002a24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f89b 	bl	8002af6 <I2C_IsAcknowledgeFailed>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e034      	b.n	8002a34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d0:	d028      	beq.n	8002a24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d2:	f7fe fcb9 	bl	8001348 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d302      	bcc.n	80029e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d11d      	bne.n	8002a24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d016      	beq.n	8002a24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e007      	b.n	8002a34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d1c3      	bne.n	80029ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a48:	e049      	b.n	8002ade <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b10      	cmp	r3, #16
 8002a56:	d119      	bne.n	8002a8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0210 	mvn.w	r2, #16
 8002a60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e030      	b.n	8002aee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8c:	f7fe fc5c 	bl	8001348 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d302      	bcc.n	8002aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d11d      	bne.n	8002ade <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aac:	2b40      	cmp	r3, #64	; 0x40
 8002aae:	d016      	beq.n	8002ade <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f043 0220 	orr.w	r2, r3, #32
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e007      	b.n	8002aee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae8:	2b40      	cmp	r3, #64	; 0x40
 8002aea:	d1ae      	bne.n	8002a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0c:	d11b      	bne.n	8002b46 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b16:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f043 0204 	orr.w	r2, r3, #4
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0cc      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b68:	4b68      	ldr	r3, [pc, #416]	; (8002d0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d90c      	bls.n	8002b90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b65      	ldr	r3, [pc, #404]	; (8002d0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b63      	ldr	r3, [pc, #396]	; (8002d0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0b8      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d020      	beq.n	8002bde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba8:	4b59      	ldr	r3, [pc, #356]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	4a58      	ldr	r2, [pc, #352]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bc0:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4a52      	ldr	r2, [pc, #328]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bcc:	4b50      	ldr	r3, [pc, #320]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	494d      	ldr	r1, [pc, #308]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d044      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d107      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	4b47      	ldr	r3, [pc, #284]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d119      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e07f      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d003      	beq.n	8002c12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c12:	4b3f      	ldr	r3, [pc, #252]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e06f      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c22:	4b3b      	ldr	r3, [pc, #236]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e067      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c32:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f023 0203 	bic.w	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4934      	ldr	r1, [pc, #208]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c44:	f7fe fb80 	bl	8001348 <HAL_GetTick>
 8002c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4a:	e00a      	b.n	8002c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c4c:	f7fe fb7c 	bl	8001348 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e04f      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c62:	4b2b      	ldr	r3, [pc, #172]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 020c 	and.w	r2, r3, #12
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d1eb      	bne.n	8002c4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c74:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d20c      	bcs.n	8002c9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c82:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b20      	ldr	r3, [pc, #128]	; (8002d0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e032      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4916      	ldr	r1, [pc, #88]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cc6:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	490e      	ldr	r1, [pc, #56]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cda:	f000 f855 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	490a      	ldr	r1, [pc, #40]	; (8002d14 <HAL_RCC_ClockConfig+0x1c0>)
 8002cec:	5ccb      	ldrb	r3, [r1, r3]
 8002cee:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf2:	4a09      	ldr	r2, [pc, #36]	; (8002d18 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cf6:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <HAL_RCC_ClockConfig+0x1c8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fae0 	bl	80012c0 <HAL_InitTick>

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40023c00 	.word	0x40023c00
 8002d10:	40023800 	.word	0x40023800
 8002d14:	08005378 	.word	0x08005378
 8002d18:	20000008 	.word	0x20000008
 8002d1c:	2000000c 	.word	0x2000000c

08002d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d24:	4b03      	ldr	r3, [pc, #12]	; (8002d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	20000008 	.word	0x20000008

08002d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d3c:	f7ff fff0 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	0a9b      	lsrs	r3, r3, #10
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4903      	ldr	r1, [pc, #12]	; (8002d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	08005388 	.word	0x08005388

08002d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d64:	f7ff ffdc 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	0b5b      	lsrs	r3, r3, #13
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4903      	ldr	r1, [pc, #12]	; (8002d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	08005388 	.word	0x08005388

08002d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d8c:	b0ae      	sub	sp, #184	; 0xb8
 8002d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dae:	4bcb      	ldr	r3, [pc, #812]	; (80030dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b0c      	cmp	r3, #12
 8002db8:	f200 8206 	bhi.w	80031c8 <HAL_RCC_GetSysClockFreq+0x440>
 8002dbc:	a201      	add	r2, pc, #4	; (adr r2, 8002dc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc2:	bf00      	nop
 8002dc4:	08002df9 	.word	0x08002df9
 8002dc8:	080031c9 	.word	0x080031c9
 8002dcc:	080031c9 	.word	0x080031c9
 8002dd0:	080031c9 	.word	0x080031c9
 8002dd4:	08002e01 	.word	0x08002e01
 8002dd8:	080031c9 	.word	0x080031c9
 8002ddc:	080031c9 	.word	0x080031c9
 8002de0:	080031c9 	.word	0x080031c9
 8002de4:	08002e09 	.word	0x08002e09
 8002de8:	080031c9 	.word	0x080031c9
 8002dec:	080031c9 	.word	0x080031c9
 8002df0:	080031c9 	.word	0x080031c9
 8002df4:	08002ff9 	.word	0x08002ff9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002df8:	4bb9      	ldr	r3, [pc, #740]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002dfe:	e1e7      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e00:	4bb8      	ldr	r3, [pc, #736]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e06:	e1e3      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e08:	4bb4      	ldr	r3, [pc, #720]	; (80030dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e14:	4bb1      	ldr	r3, [pc, #708]	; (80030dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d071      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e20:	4bae      	ldr	r3, [pc, #696]	; (80030dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	099b      	lsrs	r3, r3, #6
 8002e26:	2200      	movs	r2, #0
 8002e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e2c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e46:	4622      	mov	r2, r4
 8002e48:	462b      	mov	r3, r5
 8002e4a:	f04f 0000 	mov.w	r0, #0
 8002e4e:	f04f 0100 	mov.w	r1, #0
 8002e52:	0159      	lsls	r1, r3, #5
 8002e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e58:	0150      	lsls	r0, r2, #5
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4621      	mov	r1, r4
 8002e60:	1a51      	subs	r1, r2, r1
 8002e62:	6439      	str	r1, [r7, #64]	; 0x40
 8002e64:	4629      	mov	r1, r5
 8002e66:	eb63 0301 	sbc.w	r3, r3, r1
 8002e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e78:	4649      	mov	r1, r9
 8002e7a:	018b      	lsls	r3, r1, #6
 8002e7c:	4641      	mov	r1, r8
 8002e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e82:	4641      	mov	r1, r8
 8002e84:	018a      	lsls	r2, r1, #6
 8002e86:	4641      	mov	r1, r8
 8002e88:	1a51      	subs	r1, r2, r1
 8002e8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e8c:	4649      	mov	r1, r9
 8002e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002ea0:	4649      	mov	r1, r9
 8002ea2:	00cb      	lsls	r3, r1, #3
 8002ea4:	4641      	mov	r1, r8
 8002ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eaa:	4641      	mov	r1, r8
 8002eac:	00ca      	lsls	r2, r1, #3
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4622      	mov	r2, r4
 8002eb6:	189b      	adds	r3, r3, r2
 8002eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eba:	462b      	mov	r3, r5
 8002ebc:	460a      	mov	r2, r1
 8002ebe:	eb42 0303 	adc.w	r3, r2, r3
 8002ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	024b      	lsls	r3, r1, #9
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eda:	4621      	mov	r1, r4
 8002edc:	024a      	lsls	r2, r1, #9
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002eec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ef0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ef4:	f7fd f9dc 	bl	80002b0 <__aeabi_uldivmod>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4613      	mov	r3, r2
 8002efe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f02:	e067      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f04:	4b75      	ldr	r3, [pc, #468]	; (80030dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f10:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002f14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f1e:	2300      	movs	r3, #0
 8002f20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002f26:	4622      	mov	r2, r4
 8002f28:	462b      	mov	r3, r5
 8002f2a:	f04f 0000 	mov.w	r0, #0
 8002f2e:	f04f 0100 	mov.w	r1, #0
 8002f32:	0159      	lsls	r1, r3, #5
 8002f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f38:	0150      	lsls	r0, r2, #5
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4621      	mov	r1, r4
 8002f40:	1a51      	subs	r1, r2, r1
 8002f42:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f44:	4629      	mov	r1, r5
 8002f46:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002f58:	4649      	mov	r1, r9
 8002f5a:	018b      	lsls	r3, r1, #6
 8002f5c:	4641      	mov	r1, r8
 8002f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f62:	4641      	mov	r1, r8
 8002f64:	018a      	lsls	r2, r1, #6
 8002f66:	4641      	mov	r1, r8
 8002f68:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f6c:	4649      	mov	r1, r9
 8002f6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f86:	4692      	mov	sl, r2
 8002f88:	469b      	mov	fp, r3
 8002f8a:	4623      	mov	r3, r4
 8002f8c:	eb1a 0303 	adds.w	r3, sl, r3
 8002f90:	623b      	str	r3, [r7, #32]
 8002f92:	462b      	mov	r3, r5
 8002f94:	eb4b 0303 	adc.w	r3, fp, r3
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	028b      	lsls	r3, r1, #10
 8002faa:	4621      	mov	r1, r4
 8002fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	028a      	lsls	r2, r1, #10
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	673b      	str	r3, [r7, #112]	; 0x70
 8002fc0:	677a      	str	r2, [r7, #116]	; 0x74
 8002fc2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002fc6:	f7fd f973 	bl	80002b0 <__aeabi_uldivmod>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4613      	mov	r3, r2
 8002fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fd4:	4b41      	ldr	r3, [pc, #260]	; (80030dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	3301      	adds	r3, #1
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002fe6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ff6:	e0eb      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ff8:	4b38      	ldr	r3, [pc, #224]	; (80030dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003000:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003004:	4b35      	ldr	r3, [pc, #212]	; (80030dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d06b      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003010:	4b32      	ldr	r3, [pc, #200]	; (80030dc <HAL_RCC_GetSysClockFreq+0x354>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	099b      	lsrs	r3, r3, #6
 8003016:	2200      	movs	r2, #0
 8003018:	66bb      	str	r3, [r7, #104]	; 0x68
 800301a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800301c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800301e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003022:	663b      	str	r3, [r7, #96]	; 0x60
 8003024:	2300      	movs	r3, #0
 8003026:	667b      	str	r3, [r7, #100]	; 0x64
 8003028:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800302c:	4622      	mov	r2, r4
 800302e:	462b      	mov	r3, r5
 8003030:	f04f 0000 	mov.w	r0, #0
 8003034:	f04f 0100 	mov.w	r1, #0
 8003038:	0159      	lsls	r1, r3, #5
 800303a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800303e:	0150      	lsls	r0, r2, #5
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4621      	mov	r1, r4
 8003046:	1a51      	subs	r1, r2, r1
 8003048:	61b9      	str	r1, [r7, #24]
 800304a:	4629      	mov	r1, r5
 800304c:	eb63 0301 	sbc.w	r3, r3, r1
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800305e:	4659      	mov	r1, fp
 8003060:	018b      	lsls	r3, r1, #6
 8003062:	4651      	mov	r1, sl
 8003064:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003068:	4651      	mov	r1, sl
 800306a:	018a      	lsls	r2, r1, #6
 800306c:	4651      	mov	r1, sl
 800306e:	ebb2 0801 	subs.w	r8, r2, r1
 8003072:	4659      	mov	r1, fp
 8003074:	eb63 0901 	sbc.w	r9, r3, r1
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003084:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003088:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800308c:	4690      	mov	r8, r2
 800308e:	4699      	mov	r9, r3
 8003090:	4623      	mov	r3, r4
 8003092:	eb18 0303 	adds.w	r3, r8, r3
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	462b      	mov	r3, r5
 800309a:	eb49 0303 	adc.w	r3, r9, r3
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80030ac:	4629      	mov	r1, r5
 80030ae:	024b      	lsls	r3, r1, #9
 80030b0:	4621      	mov	r1, r4
 80030b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030b6:	4621      	mov	r1, r4
 80030b8:	024a      	lsls	r2, r1, #9
 80030ba:	4610      	mov	r0, r2
 80030bc:	4619      	mov	r1, r3
 80030be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030c2:	2200      	movs	r2, #0
 80030c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80030c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030cc:	f7fd f8f0 	bl	80002b0 <__aeabi_uldivmod>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4613      	mov	r3, r2
 80030d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030da:	e065      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x420>
 80030dc:	40023800 	.word	0x40023800
 80030e0:	00f42400 	.word	0x00f42400
 80030e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e8:	4b3d      	ldr	r3, [pc, #244]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	2200      	movs	r2, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	4611      	mov	r1, r2
 80030f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030f8:	653b      	str	r3, [r7, #80]	; 0x50
 80030fa:	2300      	movs	r3, #0
 80030fc:	657b      	str	r3, [r7, #84]	; 0x54
 80030fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003102:	4642      	mov	r2, r8
 8003104:	464b      	mov	r3, r9
 8003106:	f04f 0000 	mov.w	r0, #0
 800310a:	f04f 0100 	mov.w	r1, #0
 800310e:	0159      	lsls	r1, r3, #5
 8003110:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003114:	0150      	lsls	r0, r2, #5
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4641      	mov	r1, r8
 800311c:	1a51      	subs	r1, r2, r1
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	4649      	mov	r1, r9
 8003122:	eb63 0301 	sbc.w	r3, r3, r1
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003134:	4659      	mov	r1, fp
 8003136:	018b      	lsls	r3, r1, #6
 8003138:	4651      	mov	r1, sl
 800313a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800313e:	4651      	mov	r1, sl
 8003140:	018a      	lsls	r2, r1, #6
 8003142:	4651      	mov	r1, sl
 8003144:	1a54      	subs	r4, r2, r1
 8003146:	4659      	mov	r1, fp
 8003148:	eb63 0501 	sbc.w	r5, r3, r1
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	00eb      	lsls	r3, r5, #3
 8003156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800315a:	00e2      	lsls	r2, r4, #3
 800315c:	4614      	mov	r4, r2
 800315e:	461d      	mov	r5, r3
 8003160:	4643      	mov	r3, r8
 8003162:	18e3      	adds	r3, r4, r3
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	464b      	mov	r3, r9
 8003168:	eb45 0303 	adc.w	r3, r5, r3
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	e9d7 4500 	ldrd	r4, r5, [r7]
 800317a:	4629      	mov	r1, r5
 800317c:	028b      	lsls	r3, r1, #10
 800317e:	4621      	mov	r1, r4
 8003180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003184:	4621      	mov	r1, r4
 8003186:	028a      	lsls	r2, r1, #10
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003190:	2200      	movs	r2, #0
 8003192:	64bb      	str	r3, [r7, #72]	; 0x48
 8003194:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003196:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800319a:	f7fd f889 	bl	80002b0 <__aeabi_uldivmod>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4613      	mov	r3, r2
 80031a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031a8:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	0f1b      	lsrs	r3, r3, #28
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80031b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031c6:	e003      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80031ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	37b8      	adds	r7, #184	; 0xb8
 80031d8:	46bd      	mov	sp, r7
 80031da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031de:	bf00      	nop
 80031e0:	40023800 	.word	0x40023800
 80031e4:	00f42400 	.word	0x00f42400

080031e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e28d      	b.n	8003716 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8083 	beq.w	800330e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003208:	4b94      	ldr	r3, [pc, #592]	; (800345c <HAL_RCC_OscConfig+0x274>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b04      	cmp	r3, #4
 8003212:	d019      	beq.n	8003248 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003214:	4b91      	ldr	r3, [pc, #580]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800321c:	2b08      	cmp	r3, #8
 800321e:	d106      	bne.n	800322e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003220:	4b8e      	ldr	r3, [pc, #568]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800322c:	d00c      	beq.n	8003248 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800322e:	4b8b      	ldr	r3, [pc, #556]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d112      	bne.n	8003260 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323a:	4b88      	ldr	r3, [pc, #544]	; (800345c <HAL_RCC_OscConfig+0x274>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003246:	d10b      	bne.n	8003260 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	4b84      	ldr	r3, [pc, #528]	; (800345c <HAL_RCC_OscConfig+0x274>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d05b      	beq.n	800330c <HAL_RCC_OscConfig+0x124>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d157      	bne.n	800330c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e25a      	b.n	8003716 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003268:	d106      	bne.n	8003278 <HAL_RCC_OscConfig+0x90>
 800326a:	4b7c      	ldr	r3, [pc, #496]	; (800345c <HAL_RCC_OscConfig+0x274>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a7b      	ldr	r2, [pc, #492]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e01d      	b.n	80032b4 <HAL_RCC_OscConfig+0xcc>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0xb4>
 8003282:	4b76      	ldr	r3, [pc, #472]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a75      	ldr	r2, [pc, #468]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b73      	ldr	r3, [pc, #460]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a72      	ldr	r2, [pc, #456]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e00b      	b.n	80032b4 <HAL_RCC_OscConfig+0xcc>
 800329c:	4b6f      	ldr	r3, [pc, #444]	; (800345c <HAL_RCC_OscConfig+0x274>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a6e      	ldr	r2, [pc, #440]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b6c      	ldr	r3, [pc, #432]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a6b      	ldr	r2, [pc, #428]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80032ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe f844 	bl	8001348 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c4:	f7fe f840 	bl	8001348 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e21f      	b.n	8003716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	4b61      	ldr	r3, [pc, #388]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0xdc>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fe f830 	bl	8001348 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fe f82c 	bl	8001348 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e20b      	b.n	8003716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	4b57      	ldr	r3, [pc, #348]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x104>
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d06f      	beq.n	80033fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800331a:	4b50      	ldr	r3, [pc, #320]	; (800345c <HAL_RCC_OscConfig+0x274>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b00      	cmp	r3, #0
 8003324:	d017      	beq.n	8003356 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003326:	4b4d      	ldr	r3, [pc, #308]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800332e:	2b08      	cmp	r3, #8
 8003330:	d105      	bne.n	800333e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003332:	4b4a      	ldr	r3, [pc, #296]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00b      	beq.n	8003356 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800333e:	4b47      	ldr	r3, [pc, #284]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003346:	2b0c      	cmp	r3, #12
 8003348:	d11c      	bne.n	8003384 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800334a:	4b44      	ldr	r3, [pc, #272]	; (800345c <HAL_RCC_OscConfig+0x274>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d116      	bne.n	8003384 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003356:	4b41      	ldr	r3, [pc, #260]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_RCC_OscConfig+0x186>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d001      	beq.n	800336e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e1d3      	b.n	8003716 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336e:	4b3b      	ldr	r3, [pc, #236]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4937      	ldr	r1, [pc, #220]	; (800345c <HAL_RCC_OscConfig+0x274>)
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003382:	e03a      	b.n	80033fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d020      	beq.n	80033ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800338c:	4b34      	ldr	r3, [pc, #208]	; (8003460 <HAL_RCC_OscConfig+0x278>)
 800338e:	2201      	movs	r2, #1
 8003390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003392:	f7fd ffd9 	bl	8001348 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800339a:	f7fd ffd5 	bl	8001348 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e1b4      	b.n	8003716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ac:	4b2b      	ldr	r3, [pc, #172]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f0      	beq.n	800339a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b8:	4b28      	ldr	r3, [pc, #160]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4925      	ldr	r1, [pc, #148]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	600b      	str	r3, [r1, #0]
 80033cc:	e015      	b.n	80033fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ce:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_RCC_OscConfig+0x278>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7fd ffb8 	bl	8001348 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033dc:	f7fd ffb4 	bl	8001348 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e193      	b.n	8003716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ee:	4b1b      	ldr	r3, [pc, #108]	; (800345c <HAL_RCC_OscConfig+0x274>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d036      	beq.n	8003474 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d016      	beq.n	800343c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800340e:	4b15      	ldr	r3, [pc, #84]	; (8003464 <HAL_RCC_OscConfig+0x27c>)
 8003410:	2201      	movs	r2, #1
 8003412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003414:	f7fd ff98 	bl	8001348 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800341c:	f7fd ff94 	bl	8001348 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e173      	b.n	8003716 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342e:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x234>
 800343a:	e01b      	b.n	8003474 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800343c:	4b09      	ldr	r3, [pc, #36]	; (8003464 <HAL_RCC_OscConfig+0x27c>)
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003442:	f7fd ff81 	bl	8001348 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003448:	e00e      	b.n	8003468 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800344a:	f7fd ff7d 	bl	8001348 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d907      	bls.n	8003468 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e15c      	b.n	8003716 <HAL_RCC_OscConfig+0x52e>
 800345c:	40023800 	.word	0x40023800
 8003460:	42470000 	.word	0x42470000
 8003464:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003468:	4b8a      	ldr	r3, [pc, #552]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 800346a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1ea      	bne.n	800344a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8097 	beq.w	80035b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003482:	2300      	movs	r3, #0
 8003484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003486:	4b83      	ldr	r3, [pc, #524]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10f      	bne.n	80034b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	4b7f      	ldr	r3, [pc, #508]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	4a7e      	ldr	r2, [pc, #504]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 800349c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a0:	6413      	str	r3, [r2, #64]	; 0x40
 80034a2:	4b7c      	ldr	r3, [pc, #496]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ae:	2301      	movs	r3, #1
 80034b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b2:	4b79      	ldr	r3, [pc, #484]	; (8003698 <HAL_RCC_OscConfig+0x4b0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d118      	bne.n	80034f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034be:	4b76      	ldr	r3, [pc, #472]	; (8003698 <HAL_RCC_OscConfig+0x4b0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a75      	ldr	r2, [pc, #468]	; (8003698 <HAL_RCC_OscConfig+0x4b0>)
 80034c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ca:	f7fd ff3d 	bl	8001348 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d2:	f7fd ff39 	bl	8001348 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e118      	b.n	8003716 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	4b6c      	ldr	r3, [pc, #432]	; (8003698 <HAL_RCC_OscConfig+0x4b0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d106      	bne.n	8003506 <HAL_RCC_OscConfig+0x31e>
 80034f8:	4b66      	ldr	r3, [pc, #408]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	4a65      	ldr	r2, [pc, #404]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	6713      	str	r3, [r2, #112]	; 0x70
 8003504:	e01c      	b.n	8003540 <HAL_RCC_OscConfig+0x358>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b05      	cmp	r3, #5
 800350c:	d10c      	bne.n	8003528 <HAL_RCC_OscConfig+0x340>
 800350e:	4b61      	ldr	r3, [pc, #388]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	4a60      	ldr	r2, [pc, #384]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 8003514:	f043 0304 	orr.w	r3, r3, #4
 8003518:	6713      	str	r3, [r2, #112]	; 0x70
 800351a:	4b5e      	ldr	r3, [pc, #376]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	4a5d      	ldr	r2, [pc, #372]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	6713      	str	r3, [r2, #112]	; 0x70
 8003526:	e00b      	b.n	8003540 <HAL_RCC_OscConfig+0x358>
 8003528:	4b5a      	ldr	r3, [pc, #360]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	4a59      	ldr	r2, [pc, #356]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 800352e:	f023 0301 	bic.w	r3, r3, #1
 8003532:	6713      	str	r3, [r2, #112]	; 0x70
 8003534:	4b57      	ldr	r3, [pc, #348]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	4a56      	ldr	r2, [pc, #344]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 800353a:	f023 0304 	bic.w	r3, r3, #4
 800353e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d015      	beq.n	8003574 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7fd fefe 	bl	8001348 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354e:	e00a      	b.n	8003566 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003550:	f7fd fefa 	bl	8001348 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	f241 3288 	movw	r2, #5000	; 0x1388
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e0d7      	b.n	8003716 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003566:	4b4b      	ldr	r3, [pc, #300]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0ee      	beq.n	8003550 <HAL_RCC_OscConfig+0x368>
 8003572:	e014      	b.n	800359e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fd fee8 	bl	8001348 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357a:	e00a      	b.n	8003592 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800357c:	f7fd fee4 	bl	8001348 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e0c1      	b.n	8003716 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003592:	4b40      	ldr	r3, [pc, #256]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1ee      	bne.n	800357c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800359e:	7dfb      	ldrb	r3, [r7, #23]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d105      	bne.n	80035b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a4:	4b3b      	ldr	r3, [pc, #236]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	4a3a      	ldr	r2, [pc, #232]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 80035aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80ad 	beq.w	8003714 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ba:	4b36      	ldr	r3, [pc, #216]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d060      	beq.n	8003688 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d145      	bne.n	800365a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ce:	4b33      	ldr	r3, [pc, #204]	; (800369c <HAL_RCC_OscConfig+0x4b4>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fd feb8 	bl	8001348 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035dc:	f7fd feb4 	bl	8001348 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e093      	b.n	8003716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ee:	4b29      	ldr	r3, [pc, #164]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69da      	ldr	r2, [r3, #28]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	019b      	lsls	r3, r3, #6
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	085b      	lsrs	r3, r3, #1
 8003612:	3b01      	subs	r3, #1
 8003614:	041b      	lsls	r3, r3, #16
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	061b      	lsls	r3, r3, #24
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	071b      	lsls	r3, r3, #28
 8003626:	491b      	ldr	r1, [pc, #108]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800362c:	4b1b      	ldr	r3, [pc, #108]	; (800369c <HAL_RCC_OscConfig+0x4b4>)
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7fd fe89 	bl	8001348 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800363a:	f7fd fe85 	bl	8001348 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e064      	b.n	8003716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364c:	4b11      	ldr	r3, [pc, #68]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCC_OscConfig+0x452>
 8003658:	e05c      	b.n	8003714 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365a:	4b10      	ldr	r3, [pc, #64]	; (800369c <HAL_RCC_OscConfig+0x4b4>)
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fd fe72 	bl	8001348 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003668:	f7fd fe6e 	bl	8001348 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e04d      	b.n	8003716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367a:	4b06      	ldr	r3, [pc, #24]	; (8003694 <HAL_RCC_OscConfig+0x4ac>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x480>
 8003686:	e045      	b.n	8003714 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d107      	bne.n	80036a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e040      	b.n	8003716 <HAL_RCC_OscConfig+0x52e>
 8003694:	40023800 	.word	0x40023800
 8003698:	40007000 	.word	0x40007000
 800369c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036a0:	4b1f      	ldr	r3, [pc, #124]	; (8003720 <HAL_RCC_OscConfig+0x538>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d030      	beq.n	8003710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d129      	bne.n	8003710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d122      	bne.n	8003710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036d0:	4013      	ands	r3, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036d8:	4293      	cmp	r3, r2
 80036da:	d119      	bne.n	8003710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	3b01      	subs	r3, #1
 80036ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d10f      	bne.n	8003710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d107      	bne.n	8003710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800

08003724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e042      	b.n	80037bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd fcb2 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2224      	movs	r2, #36	; 0x24
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f82b 	bl	80037c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800377c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800378c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800379c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c8:	b0c0      	sub	sp, #256	; 0x100
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	68d9      	ldr	r1, [r3, #12]
 80037e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	ea40 0301 	orr.w	r3, r0, r1
 80037ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	431a      	orrs	r2, r3
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800381c:	f021 010c 	bic.w	r1, r1, #12
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800382a:	430b      	orrs	r3, r1
 800382c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800382e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800383a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383e:	6999      	ldr	r1, [r3, #24]
 8003840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	ea40 0301 	orr.w	r3, r0, r1
 800384a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4b8f      	ldr	r3, [pc, #572]	; (8003a90 <UART_SetConfig+0x2cc>)
 8003854:	429a      	cmp	r2, r3
 8003856:	d005      	beq.n	8003864 <UART_SetConfig+0xa0>
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4b8d      	ldr	r3, [pc, #564]	; (8003a94 <UART_SetConfig+0x2d0>)
 8003860:	429a      	cmp	r2, r3
 8003862:	d104      	bne.n	800386e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003864:	f7ff fa7c 	bl	8002d60 <HAL_RCC_GetPCLK2Freq>
 8003868:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800386c:	e003      	b.n	8003876 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800386e:	f7ff fa63 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 8003872:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003880:	f040 810c 	bne.w	8003a9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003888:	2200      	movs	r2, #0
 800388a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800388e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003892:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003896:	4622      	mov	r2, r4
 8003898:	462b      	mov	r3, r5
 800389a:	1891      	adds	r1, r2, r2
 800389c:	65b9      	str	r1, [r7, #88]	; 0x58
 800389e:	415b      	adcs	r3, r3
 80038a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038a6:	4621      	mov	r1, r4
 80038a8:	eb12 0801 	adds.w	r8, r2, r1
 80038ac:	4629      	mov	r1, r5
 80038ae:	eb43 0901 	adc.w	r9, r3, r1
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038c6:	4690      	mov	r8, r2
 80038c8:	4699      	mov	r9, r3
 80038ca:	4623      	mov	r3, r4
 80038cc:	eb18 0303 	adds.w	r3, r8, r3
 80038d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038d4:	462b      	mov	r3, r5
 80038d6:	eb49 0303 	adc.w	r3, r9, r3
 80038da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038f2:	460b      	mov	r3, r1
 80038f4:	18db      	adds	r3, r3, r3
 80038f6:	653b      	str	r3, [r7, #80]	; 0x50
 80038f8:	4613      	mov	r3, r2
 80038fa:	eb42 0303 	adc.w	r3, r2, r3
 80038fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003900:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003904:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003908:	f7fc fcd2 	bl	80002b0 <__aeabi_uldivmod>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4b61      	ldr	r3, [pc, #388]	; (8003a98 <UART_SetConfig+0x2d4>)
 8003912:	fba3 2302 	umull	r2, r3, r3, r2
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	011c      	lsls	r4, r3, #4
 800391a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800391e:	2200      	movs	r2, #0
 8003920:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003924:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003928:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800392c:	4642      	mov	r2, r8
 800392e:	464b      	mov	r3, r9
 8003930:	1891      	adds	r1, r2, r2
 8003932:	64b9      	str	r1, [r7, #72]	; 0x48
 8003934:	415b      	adcs	r3, r3
 8003936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003938:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800393c:	4641      	mov	r1, r8
 800393e:	eb12 0a01 	adds.w	sl, r2, r1
 8003942:	4649      	mov	r1, r9
 8003944:	eb43 0b01 	adc.w	fp, r3, r1
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003954:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800395c:	4692      	mov	sl, r2
 800395e:	469b      	mov	fp, r3
 8003960:	4643      	mov	r3, r8
 8003962:	eb1a 0303 	adds.w	r3, sl, r3
 8003966:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800396a:	464b      	mov	r3, r9
 800396c:	eb4b 0303 	adc.w	r3, fp, r3
 8003970:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003980:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003984:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003988:	460b      	mov	r3, r1
 800398a:	18db      	adds	r3, r3, r3
 800398c:	643b      	str	r3, [r7, #64]	; 0x40
 800398e:	4613      	mov	r3, r2
 8003990:	eb42 0303 	adc.w	r3, r2, r3
 8003994:	647b      	str	r3, [r7, #68]	; 0x44
 8003996:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800399a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800399e:	f7fc fc87 	bl	80002b0 <__aeabi_uldivmod>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4611      	mov	r1, r2
 80039a8:	4b3b      	ldr	r3, [pc, #236]	; (8003a98 <UART_SetConfig+0x2d4>)
 80039aa:	fba3 2301 	umull	r2, r3, r3, r1
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	2264      	movs	r2, #100	; 0x64
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
 80039b6:	1acb      	subs	r3, r1, r3
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80039be:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <UART_SetConfig+0x2d4>)
 80039c0:	fba3 2302 	umull	r2, r3, r3, r2
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039cc:	441c      	add	r4, r3
 80039ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039e0:	4642      	mov	r2, r8
 80039e2:	464b      	mov	r3, r9
 80039e4:	1891      	adds	r1, r2, r2
 80039e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80039e8:	415b      	adcs	r3, r3
 80039ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039f0:	4641      	mov	r1, r8
 80039f2:	1851      	adds	r1, r2, r1
 80039f4:	6339      	str	r1, [r7, #48]	; 0x30
 80039f6:	4649      	mov	r1, r9
 80039f8:	414b      	adcs	r3, r1
 80039fa:	637b      	str	r3, [r7, #52]	; 0x34
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a08:	4659      	mov	r1, fp
 8003a0a:	00cb      	lsls	r3, r1, #3
 8003a0c:	4651      	mov	r1, sl
 8003a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a12:	4651      	mov	r1, sl
 8003a14:	00ca      	lsls	r2, r1, #3
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4642      	mov	r2, r8
 8003a1e:	189b      	adds	r3, r3, r2
 8003a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a24:	464b      	mov	r3, r9
 8003a26:	460a      	mov	r2, r1
 8003a28:	eb42 0303 	adc.w	r3, r2, r3
 8003a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a44:	460b      	mov	r3, r1
 8003a46:	18db      	adds	r3, r3, r3
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	eb42 0303 	adc.w	r3, r2, r3
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a5a:	f7fc fc29 	bl	80002b0 <__aeabi_uldivmod>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <UART_SetConfig+0x2d4>)
 8003a64:	fba3 1302 	umull	r1, r3, r3, r2
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	2164      	movs	r1, #100	; 0x64
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	3332      	adds	r3, #50	; 0x32
 8003a76:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <UART_SetConfig+0x2d4>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	f003 0207 	and.w	r2, r3, #7
 8003a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4422      	add	r2, r4
 8003a8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a8c:	e106      	b.n	8003c9c <UART_SetConfig+0x4d8>
 8003a8e:	bf00      	nop
 8003a90:	40011000 	.word	0x40011000
 8003a94:	40011400 	.word	0x40011400
 8003a98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003aa6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003aaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003aae:	4642      	mov	r2, r8
 8003ab0:	464b      	mov	r3, r9
 8003ab2:	1891      	adds	r1, r2, r2
 8003ab4:	6239      	str	r1, [r7, #32]
 8003ab6:	415b      	adcs	r3, r3
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003abe:	4641      	mov	r1, r8
 8003ac0:	1854      	adds	r4, r2, r1
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	eb43 0501 	adc.w	r5, r3, r1
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	00eb      	lsls	r3, r5, #3
 8003ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ad6:	00e2      	lsls	r2, r4, #3
 8003ad8:	4614      	mov	r4, r2
 8003ada:	461d      	mov	r5, r3
 8003adc:	4643      	mov	r3, r8
 8003ade:	18e3      	adds	r3, r4, r3
 8003ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ae4:	464b      	mov	r3, r9
 8003ae6:	eb45 0303 	adc.w	r3, r5, r3
 8003aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003afa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	008b      	lsls	r3, r1, #2
 8003b0e:	4621      	mov	r1, r4
 8003b10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b14:	4621      	mov	r1, r4
 8003b16:	008a      	lsls	r2, r1, #2
 8003b18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b1c:	f7fc fbc8 	bl	80002b0 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4b60      	ldr	r3, [pc, #384]	; (8003ca8 <UART_SetConfig+0x4e4>)
 8003b26:	fba3 2302 	umull	r2, r3, r3, r2
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	011c      	lsls	r4, r3, #4
 8003b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b40:	4642      	mov	r2, r8
 8003b42:	464b      	mov	r3, r9
 8003b44:	1891      	adds	r1, r2, r2
 8003b46:	61b9      	str	r1, [r7, #24]
 8003b48:	415b      	adcs	r3, r3
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b50:	4641      	mov	r1, r8
 8003b52:	1851      	adds	r1, r2, r1
 8003b54:	6139      	str	r1, [r7, #16]
 8003b56:	4649      	mov	r1, r9
 8003b58:	414b      	adcs	r3, r1
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b68:	4659      	mov	r1, fp
 8003b6a:	00cb      	lsls	r3, r1, #3
 8003b6c:	4651      	mov	r1, sl
 8003b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b72:	4651      	mov	r1, sl
 8003b74:	00ca      	lsls	r2, r1, #3
 8003b76:	4610      	mov	r0, r2
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	189b      	adds	r3, r3, r2
 8003b80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b84:	464b      	mov	r3, r9
 8003b86:	460a      	mov	r2, r1
 8003b88:	eb42 0303 	adc.w	r3, r2, r3
 8003b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ba8:	4649      	mov	r1, r9
 8003baa:	008b      	lsls	r3, r1, #2
 8003bac:	4641      	mov	r1, r8
 8003bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bb2:	4641      	mov	r1, r8
 8003bb4:	008a      	lsls	r2, r1, #2
 8003bb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003bba:	f7fc fb79 	bl	80002b0 <__aeabi_uldivmod>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4b38      	ldr	r3, [pc, #224]	; (8003ca8 <UART_SetConfig+0x4e4>)
 8003bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	2264      	movs	r2, #100	; 0x64
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	1acb      	subs	r3, r1, r3
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	3332      	adds	r3, #50	; 0x32
 8003bd8:	4a33      	ldr	r2, [pc, #204]	; (8003ca8 <UART_SetConfig+0x4e4>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be4:	441c      	add	r4, r3
 8003be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bea:	2200      	movs	r2, #0
 8003bec:	673b      	str	r3, [r7, #112]	; 0x70
 8003bee:	677a      	str	r2, [r7, #116]	; 0x74
 8003bf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bf4:	4642      	mov	r2, r8
 8003bf6:	464b      	mov	r3, r9
 8003bf8:	1891      	adds	r1, r2, r2
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	415b      	adcs	r3, r3
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c04:	4641      	mov	r1, r8
 8003c06:	1851      	adds	r1, r2, r1
 8003c08:	6039      	str	r1, [r7, #0]
 8003c0a:	4649      	mov	r1, r9
 8003c0c:	414b      	adcs	r3, r1
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c1c:	4659      	mov	r1, fp
 8003c1e:	00cb      	lsls	r3, r1, #3
 8003c20:	4651      	mov	r1, sl
 8003c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c26:	4651      	mov	r1, sl
 8003c28:	00ca      	lsls	r2, r1, #3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4642      	mov	r2, r8
 8003c32:	189b      	adds	r3, r3, r2
 8003c34:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c36:	464b      	mov	r3, r9
 8003c38:	460a      	mov	r2, r1
 8003c3a:	eb42 0303 	adc.w	r3, r2, r3
 8003c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	663b      	str	r3, [r7, #96]	; 0x60
 8003c4a:	667a      	str	r2, [r7, #100]	; 0x64
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c58:	4649      	mov	r1, r9
 8003c5a:	008b      	lsls	r3, r1, #2
 8003c5c:	4641      	mov	r1, r8
 8003c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c62:	4641      	mov	r1, r8
 8003c64:	008a      	lsls	r2, r1, #2
 8003c66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c6a:	f7fc fb21 	bl	80002b0 <__aeabi_uldivmod>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <UART_SetConfig+0x4e4>)
 8003c74:	fba3 1302 	umull	r1, r3, r3, r2
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	2164      	movs	r1, #100	; 0x64
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	3332      	adds	r3, #50	; 0x32
 8003c86:	4a08      	ldr	r2, [pc, #32]	; (8003ca8 <UART_SetConfig+0x4e4>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	f003 020f 	and.w	r2, r3, #15
 8003c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4422      	add	r2, r4
 8003c9a:	609a      	str	r2, [r3, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ca8:	51eb851f 	.word	0x51eb851f

08003cac <siprintf>:
 8003cac:	b40e      	push	{r1, r2, r3}
 8003cae:	b500      	push	{lr}
 8003cb0:	b09c      	sub	sp, #112	; 0x70
 8003cb2:	ab1d      	add	r3, sp, #116	; 0x74
 8003cb4:	9002      	str	r0, [sp, #8]
 8003cb6:	9006      	str	r0, [sp, #24]
 8003cb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cbc:	4809      	ldr	r0, [pc, #36]	; (8003ce4 <siprintf+0x38>)
 8003cbe:	9107      	str	r1, [sp, #28]
 8003cc0:	9104      	str	r1, [sp, #16]
 8003cc2:	4909      	ldr	r1, [pc, #36]	; (8003ce8 <siprintf+0x3c>)
 8003cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cc8:	9105      	str	r1, [sp, #20]
 8003cca:	6800      	ldr	r0, [r0, #0]
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	a902      	add	r1, sp, #8
 8003cd0:	f000 f992 	bl	8003ff8 <_svfiprintf_r>
 8003cd4:	9b02      	ldr	r3, [sp, #8]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	b01c      	add	sp, #112	; 0x70
 8003cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ce0:	b003      	add	sp, #12
 8003ce2:	4770      	bx	lr
 8003ce4:	20000060 	.word	0x20000060
 8003ce8:	ffff0208 	.word	0xffff0208

08003cec <memset>:
 8003cec:	4402      	add	r2, r0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d100      	bne.n	8003cf6 <memset+0xa>
 8003cf4:	4770      	bx	lr
 8003cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cfa:	e7f9      	b.n	8003cf0 <memset+0x4>

08003cfc <__errno>:
 8003cfc:	4b01      	ldr	r3, [pc, #4]	; (8003d04 <__errno+0x8>)
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20000060 	.word	0x20000060

08003d08 <__libc_init_array>:
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	4d0d      	ldr	r5, [pc, #52]	; (8003d40 <__libc_init_array+0x38>)
 8003d0c:	4c0d      	ldr	r4, [pc, #52]	; (8003d44 <__libc_init_array+0x3c>)
 8003d0e:	1b64      	subs	r4, r4, r5
 8003d10:	10a4      	asrs	r4, r4, #2
 8003d12:	2600      	movs	r6, #0
 8003d14:	42a6      	cmp	r6, r4
 8003d16:	d109      	bne.n	8003d2c <__libc_init_array+0x24>
 8003d18:	4d0b      	ldr	r5, [pc, #44]	; (8003d48 <__libc_init_array+0x40>)
 8003d1a:	4c0c      	ldr	r4, [pc, #48]	; (8003d4c <__libc_init_array+0x44>)
 8003d1c:	f000 fc6a 	bl	80045f4 <_init>
 8003d20:	1b64      	subs	r4, r4, r5
 8003d22:	10a4      	asrs	r4, r4, #2
 8003d24:	2600      	movs	r6, #0
 8003d26:	42a6      	cmp	r6, r4
 8003d28:	d105      	bne.n	8003d36 <__libc_init_array+0x2e>
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
 8003d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d30:	4798      	blx	r3
 8003d32:	3601      	adds	r6, #1
 8003d34:	e7ee      	b.n	8003d14 <__libc_init_array+0xc>
 8003d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3a:	4798      	blx	r3
 8003d3c:	3601      	adds	r6, #1
 8003d3e:	e7f2      	b.n	8003d26 <__libc_init_array+0x1e>
 8003d40:	080053cc 	.word	0x080053cc
 8003d44:	080053cc 	.word	0x080053cc
 8003d48:	080053cc 	.word	0x080053cc
 8003d4c:	080053d0 	.word	0x080053d0

08003d50 <__retarget_lock_acquire_recursive>:
 8003d50:	4770      	bx	lr

08003d52 <__retarget_lock_release_recursive>:
 8003d52:	4770      	bx	lr

08003d54 <_free_r>:
 8003d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d56:	2900      	cmp	r1, #0
 8003d58:	d044      	beq.n	8003de4 <_free_r+0x90>
 8003d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d5e:	9001      	str	r0, [sp, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f1a1 0404 	sub.w	r4, r1, #4
 8003d66:	bfb8      	it	lt
 8003d68:	18e4      	addlt	r4, r4, r3
 8003d6a:	f000 f8df 	bl	8003f2c <__malloc_lock>
 8003d6e:	4a1e      	ldr	r2, [pc, #120]	; (8003de8 <_free_r+0x94>)
 8003d70:	9801      	ldr	r0, [sp, #4]
 8003d72:	6813      	ldr	r3, [r2, #0]
 8003d74:	b933      	cbnz	r3, 8003d84 <_free_r+0x30>
 8003d76:	6063      	str	r3, [r4, #4]
 8003d78:	6014      	str	r4, [r2, #0]
 8003d7a:	b003      	add	sp, #12
 8003d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d80:	f000 b8da 	b.w	8003f38 <__malloc_unlock>
 8003d84:	42a3      	cmp	r3, r4
 8003d86:	d908      	bls.n	8003d9a <_free_r+0x46>
 8003d88:	6825      	ldr	r5, [r4, #0]
 8003d8a:	1961      	adds	r1, r4, r5
 8003d8c:	428b      	cmp	r3, r1
 8003d8e:	bf01      	itttt	eq
 8003d90:	6819      	ldreq	r1, [r3, #0]
 8003d92:	685b      	ldreq	r3, [r3, #4]
 8003d94:	1949      	addeq	r1, r1, r5
 8003d96:	6021      	streq	r1, [r4, #0]
 8003d98:	e7ed      	b.n	8003d76 <_free_r+0x22>
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	b10b      	cbz	r3, 8003da4 <_free_r+0x50>
 8003da0:	42a3      	cmp	r3, r4
 8003da2:	d9fa      	bls.n	8003d9a <_free_r+0x46>
 8003da4:	6811      	ldr	r1, [r2, #0]
 8003da6:	1855      	adds	r5, r2, r1
 8003da8:	42a5      	cmp	r5, r4
 8003daa:	d10b      	bne.n	8003dc4 <_free_r+0x70>
 8003dac:	6824      	ldr	r4, [r4, #0]
 8003dae:	4421      	add	r1, r4
 8003db0:	1854      	adds	r4, r2, r1
 8003db2:	42a3      	cmp	r3, r4
 8003db4:	6011      	str	r1, [r2, #0]
 8003db6:	d1e0      	bne.n	8003d7a <_free_r+0x26>
 8003db8:	681c      	ldr	r4, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	6053      	str	r3, [r2, #4]
 8003dbe:	440c      	add	r4, r1
 8003dc0:	6014      	str	r4, [r2, #0]
 8003dc2:	e7da      	b.n	8003d7a <_free_r+0x26>
 8003dc4:	d902      	bls.n	8003dcc <_free_r+0x78>
 8003dc6:	230c      	movs	r3, #12
 8003dc8:	6003      	str	r3, [r0, #0]
 8003dca:	e7d6      	b.n	8003d7a <_free_r+0x26>
 8003dcc:	6825      	ldr	r5, [r4, #0]
 8003dce:	1961      	adds	r1, r4, r5
 8003dd0:	428b      	cmp	r3, r1
 8003dd2:	bf04      	itt	eq
 8003dd4:	6819      	ldreq	r1, [r3, #0]
 8003dd6:	685b      	ldreq	r3, [r3, #4]
 8003dd8:	6063      	str	r3, [r4, #4]
 8003dda:	bf04      	itt	eq
 8003ddc:	1949      	addeq	r1, r1, r5
 8003dde:	6021      	streq	r1, [r4, #0]
 8003de0:	6054      	str	r4, [r2, #4]
 8003de2:	e7ca      	b.n	8003d7a <_free_r+0x26>
 8003de4:	b003      	add	sp, #12
 8003de6:	bd30      	pop	{r4, r5, pc}
 8003de8:	200006c0 	.word	0x200006c0

08003dec <sbrk_aligned>:
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	4e0e      	ldr	r6, [pc, #56]	; (8003e28 <sbrk_aligned+0x3c>)
 8003df0:	460c      	mov	r4, r1
 8003df2:	6831      	ldr	r1, [r6, #0]
 8003df4:	4605      	mov	r5, r0
 8003df6:	b911      	cbnz	r1, 8003dfe <sbrk_aligned+0x12>
 8003df8:	f000 fba6 	bl	8004548 <_sbrk_r>
 8003dfc:	6030      	str	r0, [r6, #0]
 8003dfe:	4621      	mov	r1, r4
 8003e00:	4628      	mov	r0, r5
 8003e02:	f000 fba1 	bl	8004548 <_sbrk_r>
 8003e06:	1c43      	adds	r3, r0, #1
 8003e08:	d00a      	beq.n	8003e20 <sbrk_aligned+0x34>
 8003e0a:	1cc4      	adds	r4, r0, #3
 8003e0c:	f024 0403 	bic.w	r4, r4, #3
 8003e10:	42a0      	cmp	r0, r4
 8003e12:	d007      	beq.n	8003e24 <sbrk_aligned+0x38>
 8003e14:	1a21      	subs	r1, r4, r0
 8003e16:	4628      	mov	r0, r5
 8003e18:	f000 fb96 	bl	8004548 <_sbrk_r>
 8003e1c:	3001      	adds	r0, #1
 8003e1e:	d101      	bne.n	8003e24 <sbrk_aligned+0x38>
 8003e20:	f04f 34ff 	mov.w	r4, #4294967295
 8003e24:	4620      	mov	r0, r4
 8003e26:	bd70      	pop	{r4, r5, r6, pc}
 8003e28:	200006c4 	.word	0x200006c4

08003e2c <_malloc_r>:
 8003e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e30:	1ccd      	adds	r5, r1, #3
 8003e32:	f025 0503 	bic.w	r5, r5, #3
 8003e36:	3508      	adds	r5, #8
 8003e38:	2d0c      	cmp	r5, #12
 8003e3a:	bf38      	it	cc
 8003e3c:	250c      	movcc	r5, #12
 8003e3e:	2d00      	cmp	r5, #0
 8003e40:	4607      	mov	r7, r0
 8003e42:	db01      	blt.n	8003e48 <_malloc_r+0x1c>
 8003e44:	42a9      	cmp	r1, r5
 8003e46:	d905      	bls.n	8003e54 <_malloc_r+0x28>
 8003e48:	230c      	movs	r3, #12
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	2600      	movs	r6, #0
 8003e4e:	4630      	mov	r0, r6
 8003e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003f28 <_malloc_r+0xfc>
 8003e58:	f000 f868 	bl	8003f2c <__malloc_lock>
 8003e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8003e60:	461c      	mov	r4, r3
 8003e62:	bb5c      	cbnz	r4, 8003ebc <_malloc_r+0x90>
 8003e64:	4629      	mov	r1, r5
 8003e66:	4638      	mov	r0, r7
 8003e68:	f7ff ffc0 	bl	8003dec <sbrk_aligned>
 8003e6c:	1c43      	adds	r3, r0, #1
 8003e6e:	4604      	mov	r4, r0
 8003e70:	d155      	bne.n	8003f1e <_malloc_r+0xf2>
 8003e72:	f8d8 4000 	ldr.w	r4, [r8]
 8003e76:	4626      	mov	r6, r4
 8003e78:	2e00      	cmp	r6, #0
 8003e7a:	d145      	bne.n	8003f08 <_malloc_r+0xdc>
 8003e7c:	2c00      	cmp	r4, #0
 8003e7e:	d048      	beq.n	8003f12 <_malloc_r+0xe6>
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	4631      	mov	r1, r6
 8003e84:	4638      	mov	r0, r7
 8003e86:	eb04 0903 	add.w	r9, r4, r3
 8003e8a:	f000 fb5d 	bl	8004548 <_sbrk_r>
 8003e8e:	4581      	cmp	r9, r0
 8003e90:	d13f      	bne.n	8003f12 <_malloc_r+0xe6>
 8003e92:	6821      	ldr	r1, [r4, #0]
 8003e94:	1a6d      	subs	r5, r5, r1
 8003e96:	4629      	mov	r1, r5
 8003e98:	4638      	mov	r0, r7
 8003e9a:	f7ff ffa7 	bl	8003dec <sbrk_aligned>
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	d037      	beq.n	8003f12 <_malloc_r+0xe6>
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	442b      	add	r3, r5
 8003ea6:	6023      	str	r3, [r4, #0]
 8003ea8:	f8d8 3000 	ldr.w	r3, [r8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d038      	beq.n	8003f22 <_malloc_r+0xf6>
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	42a2      	cmp	r2, r4
 8003eb4:	d12b      	bne.n	8003f0e <_malloc_r+0xe2>
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	e00f      	b.n	8003edc <_malloc_r+0xb0>
 8003ebc:	6822      	ldr	r2, [r4, #0]
 8003ebe:	1b52      	subs	r2, r2, r5
 8003ec0:	d41f      	bmi.n	8003f02 <_malloc_r+0xd6>
 8003ec2:	2a0b      	cmp	r2, #11
 8003ec4:	d917      	bls.n	8003ef6 <_malloc_r+0xca>
 8003ec6:	1961      	adds	r1, r4, r5
 8003ec8:	42a3      	cmp	r3, r4
 8003eca:	6025      	str	r5, [r4, #0]
 8003ecc:	bf18      	it	ne
 8003ece:	6059      	strne	r1, [r3, #4]
 8003ed0:	6863      	ldr	r3, [r4, #4]
 8003ed2:	bf08      	it	eq
 8003ed4:	f8c8 1000 	streq.w	r1, [r8]
 8003ed8:	5162      	str	r2, [r4, r5]
 8003eda:	604b      	str	r3, [r1, #4]
 8003edc:	4638      	mov	r0, r7
 8003ede:	f104 060b 	add.w	r6, r4, #11
 8003ee2:	f000 f829 	bl	8003f38 <__malloc_unlock>
 8003ee6:	f026 0607 	bic.w	r6, r6, #7
 8003eea:	1d23      	adds	r3, r4, #4
 8003eec:	1af2      	subs	r2, r6, r3
 8003eee:	d0ae      	beq.n	8003e4e <_malloc_r+0x22>
 8003ef0:	1b9b      	subs	r3, r3, r6
 8003ef2:	50a3      	str	r3, [r4, r2]
 8003ef4:	e7ab      	b.n	8003e4e <_malloc_r+0x22>
 8003ef6:	42a3      	cmp	r3, r4
 8003ef8:	6862      	ldr	r2, [r4, #4]
 8003efa:	d1dd      	bne.n	8003eb8 <_malloc_r+0x8c>
 8003efc:	f8c8 2000 	str.w	r2, [r8]
 8003f00:	e7ec      	b.n	8003edc <_malloc_r+0xb0>
 8003f02:	4623      	mov	r3, r4
 8003f04:	6864      	ldr	r4, [r4, #4]
 8003f06:	e7ac      	b.n	8003e62 <_malloc_r+0x36>
 8003f08:	4634      	mov	r4, r6
 8003f0a:	6876      	ldr	r6, [r6, #4]
 8003f0c:	e7b4      	b.n	8003e78 <_malloc_r+0x4c>
 8003f0e:	4613      	mov	r3, r2
 8003f10:	e7cc      	b.n	8003eac <_malloc_r+0x80>
 8003f12:	230c      	movs	r3, #12
 8003f14:	603b      	str	r3, [r7, #0]
 8003f16:	4638      	mov	r0, r7
 8003f18:	f000 f80e 	bl	8003f38 <__malloc_unlock>
 8003f1c:	e797      	b.n	8003e4e <_malloc_r+0x22>
 8003f1e:	6025      	str	r5, [r4, #0]
 8003f20:	e7dc      	b.n	8003edc <_malloc_r+0xb0>
 8003f22:	605b      	str	r3, [r3, #4]
 8003f24:	deff      	udf	#255	; 0xff
 8003f26:	bf00      	nop
 8003f28:	200006c0 	.word	0x200006c0

08003f2c <__malloc_lock>:
 8003f2c:	4801      	ldr	r0, [pc, #4]	; (8003f34 <__malloc_lock+0x8>)
 8003f2e:	f7ff bf0f 	b.w	8003d50 <__retarget_lock_acquire_recursive>
 8003f32:	bf00      	nop
 8003f34:	200006bc 	.word	0x200006bc

08003f38 <__malloc_unlock>:
 8003f38:	4801      	ldr	r0, [pc, #4]	; (8003f40 <__malloc_unlock+0x8>)
 8003f3a:	f7ff bf0a 	b.w	8003d52 <__retarget_lock_release_recursive>
 8003f3e:	bf00      	nop
 8003f40:	200006bc 	.word	0x200006bc

08003f44 <__ssputs_r>:
 8003f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f48:	688e      	ldr	r6, [r1, #8]
 8003f4a:	461f      	mov	r7, r3
 8003f4c:	42be      	cmp	r6, r7
 8003f4e:	680b      	ldr	r3, [r1, #0]
 8003f50:	4682      	mov	sl, r0
 8003f52:	460c      	mov	r4, r1
 8003f54:	4690      	mov	r8, r2
 8003f56:	d82c      	bhi.n	8003fb2 <__ssputs_r+0x6e>
 8003f58:	898a      	ldrh	r2, [r1, #12]
 8003f5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f5e:	d026      	beq.n	8003fae <__ssputs_r+0x6a>
 8003f60:	6965      	ldr	r5, [r4, #20]
 8003f62:	6909      	ldr	r1, [r1, #16]
 8003f64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f68:	eba3 0901 	sub.w	r9, r3, r1
 8003f6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f70:	1c7b      	adds	r3, r7, #1
 8003f72:	444b      	add	r3, r9
 8003f74:	106d      	asrs	r5, r5, #1
 8003f76:	429d      	cmp	r5, r3
 8003f78:	bf38      	it	cc
 8003f7a:	461d      	movcc	r5, r3
 8003f7c:	0553      	lsls	r3, r2, #21
 8003f7e:	d527      	bpl.n	8003fd0 <__ssputs_r+0x8c>
 8003f80:	4629      	mov	r1, r5
 8003f82:	f7ff ff53 	bl	8003e2c <_malloc_r>
 8003f86:	4606      	mov	r6, r0
 8003f88:	b360      	cbz	r0, 8003fe4 <__ssputs_r+0xa0>
 8003f8a:	6921      	ldr	r1, [r4, #16]
 8003f8c:	464a      	mov	r2, r9
 8003f8e:	f000 faeb 	bl	8004568 <memcpy>
 8003f92:	89a3      	ldrh	r3, [r4, #12]
 8003f94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9c:	81a3      	strh	r3, [r4, #12]
 8003f9e:	6126      	str	r6, [r4, #16]
 8003fa0:	6165      	str	r5, [r4, #20]
 8003fa2:	444e      	add	r6, r9
 8003fa4:	eba5 0509 	sub.w	r5, r5, r9
 8003fa8:	6026      	str	r6, [r4, #0]
 8003faa:	60a5      	str	r5, [r4, #8]
 8003fac:	463e      	mov	r6, r7
 8003fae:	42be      	cmp	r6, r7
 8003fb0:	d900      	bls.n	8003fb4 <__ssputs_r+0x70>
 8003fb2:	463e      	mov	r6, r7
 8003fb4:	6820      	ldr	r0, [r4, #0]
 8003fb6:	4632      	mov	r2, r6
 8003fb8:	4641      	mov	r1, r8
 8003fba:	f000 faab 	bl	8004514 <memmove>
 8003fbe:	68a3      	ldr	r3, [r4, #8]
 8003fc0:	1b9b      	subs	r3, r3, r6
 8003fc2:	60a3      	str	r3, [r4, #8]
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	4433      	add	r3, r6
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	2000      	movs	r0, #0
 8003fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd0:	462a      	mov	r2, r5
 8003fd2:	f000 fad7 	bl	8004584 <_realloc_r>
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d1e0      	bne.n	8003f9e <__ssputs_r+0x5a>
 8003fdc:	6921      	ldr	r1, [r4, #16]
 8003fde:	4650      	mov	r0, sl
 8003fe0:	f7ff feb8 	bl	8003d54 <_free_r>
 8003fe4:	230c      	movs	r3, #12
 8003fe6:	f8ca 3000 	str.w	r3, [sl]
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ff0:	81a3      	strh	r3, [r4, #12]
 8003ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff6:	e7e9      	b.n	8003fcc <__ssputs_r+0x88>

08003ff8 <_svfiprintf_r>:
 8003ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ffc:	4698      	mov	r8, r3
 8003ffe:	898b      	ldrh	r3, [r1, #12]
 8004000:	061b      	lsls	r3, r3, #24
 8004002:	b09d      	sub	sp, #116	; 0x74
 8004004:	4607      	mov	r7, r0
 8004006:	460d      	mov	r5, r1
 8004008:	4614      	mov	r4, r2
 800400a:	d50e      	bpl.n	800402a <_svfiprintf_r+0x32>
 800400c:	690b      	ldr	r3, [r1, #16]
 800400e:	b963      	cbnz	r3, 800402a <_svfiprintf_r+0x32>
 8004010:	2140      	movs	r1, #64	; 0x40
 8004012:	f7ff ff0b 	bl	8003e2c <_malloc_r>
 8004016:	6028      	str	r0, [r5, #0]
 8004018:	6128      	str	r0, [r5, #16]
 800401a:	b920      	cbnz	r0, 8004026 <_svfiprintf_r+0x2e>
 800401c:	230c      	movs	r3, #12
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	f04f 30ff 	mov.w	r0, #4294967295
 8004024:	e0d0      	b.n	80041c8 <_svfiprintf_r+0x1d0>
 8004026:	2340      	movs	r3, #64	; 0x40
 8004028:	616b      	str	r3, [r5, #20]
 800402a:	2300      	movs	r3, #0
 800402c:	9309      	str	r3, [sp, #36]	; 0x24
 800402e:	2320      	movs	r3, #32
 8004030:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004034:	f8cd 800c 	str.w	r8, [sp, #12]
 8004038:	2330      	movs	r3, #48	; 0x30
 800403a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80041e0 <_svfiprintf_r+0x1e8>
 800403e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004042:	f04f 0901 	mov.w	r9, #1
 8004046:	4623      	mov	r3, r4
 8004048:	469a      	mov	sl, r3
 800404a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800404e:	b10a      	cbz	r2, 8004054 <_svfiprintf_r+0x5c>
 8004050:	2a25      	cmp	r2, #37	; 0x25
 8004052:	d1f9      	bne.n	8004048 <_svfiprintf_r+0x50>
 8004054:	ebba 0b04 	subs.w	fp, sl, r4
 8004058:	d00b      	beq.n	8004072 <_svfiprintf_r+0x7a>
 800405a:	465b      	mov	r3, fp
 800405c:	4622      	mov	r2, r4
 800405e:	4629      	mov	r1, r5
 8004060:	4638      	mov	r0, r7
 8004062:	f7ff ff6f 	bl	8003f44 <__ssputs_r>
 8004066:	3001      	adds	r0, #1
 8004068:	f000 80a9 	beq.w	80041be <_svfiprintf_r+0x1c6>
 800406c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800406e:	445a      	add	r2, fp
 8004070:	9209      	str	r2, [sp, #36]	; 0x24
 8004072:	f89a 3000 	ldrb.w	r3, [sl]
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 80a1 	beq.w	80041be <_svfiprintf_r+0x1c6>
 800407c:	2300      	movs	r3, #0
 800407e:	f04f 32ff 	mov.w	r2, #4294967295
 8004082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004086:	f10a 0a01 	add.w	sl, sl, #1
 800408a:	9304      	str	r3, [sp, #16]
 800408c:	9307      	str	r3, [sp, #28]
 800408e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004092:	931a      	str	r3, [sp, #104]	; 0x68
 8004094:	4654      	mov	r4, sl
 8004096:	2205      	movs	r2, #5
 8004098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800409c:	4850      	ldr	r0, [pc, #320]	; (80041e0 <_svfiprintf_r+0x1e8>)
 800409e:	f7fc f8b7 	bl	8000210 <memchr>
 80040a2:	9a04      	ldr	r2, [sp, #16]
 80040a4:	b9d8      	cbnz	r0, 80040de <_svfiprintf_r+0xe6>
 80040a6:	06d0      	lsls	r0, r2, #27
 80040a8:	bf44      	itt	mi
 80040aa:	2320      	movmi	r3, #32
 80040ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040b0:	0711      	lsls	r1, r2, #28
 80040b2:	bf44      	itt	mi
 80040b4:	232b      	movmi	r3, #43	; 0x2b
 80040b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040ba:	f89a 3000 	ldrb.w	r3, [sl]
 80040be:	2b2a      	cmp	r3, #42	; 0x2a
 80040c0:	d015      	beq.n	80040ee <_svfiprintf_r+0xf6>
 80040c2:	9a07      	ldr	r2, [sp, #28]
 80040c4:	4654      	mov	r4, sl
 80040c6:	2000      	movs	r0, #0
 80040c8:	f04f 0c0a 	mov.w	ip, #10
 80040cc:	4621      	mov	r1, r4
 80040ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040d2:	3b30      	subs	r3, #48	; 0x30
 80040d4:	2b09      	cmp	r3, #9
 80040d6:	d94d      	bls.n	8004174 <_svfiprintf_r+0x17c>
 80040d8:	b1b0      	cbz	r0, 8004108 <_svfiprintf_r+0x110>
 80040da:	9207      	str	r2, [sp, #28]
 80040dc:	e014      	b.n	8004108 <_svfiprintf_r+0x110>
 80040de:	eba0 0308 	sub.w	r3, r0, r8
 80040e2:	fa09 f303 	lsl.w	r3, r9, r3
 80040e6:	4313      	orrs	r3, r2
 80040e8:	9304      	str	r3, [sp, #16]
 80040ea:	46a2      	mov	sl, r4
 80040ec:	e7d2      	b.n	8004094 <_svfiprintf_r+0x9c>
 80040ee:	9b03      	ldr	r3, [sp, #12]
 80040f0:	1d19      	adds	r1, r3, #4
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	9103      	str	r1, [sp, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	bfbb      	ittet	lt
 80040fa:	425b      	neglt	r3, r3
 80040fc:	f042 0202 	orrlt.w	r2, r2, #2
 8004100:	9307      	strge	r3, [sp, #28]
 8004102:	9307      	strlt	r3, [sp, #28]
 8004104:	bfb8      	it	lt
 8004106:	9204      	strlt	r2, [sp, #16]
 8004108:	7823      	ldrb	r3, [r4, #0]
 800410a:	2b2e      	cmp	r3, #46	; 0x2e
 800410c:	d10c      	bne.n	8004128 <_svfiprintf_r+0x130>
 800410e:	7863      	ldrb	r3, [r4, #1]
 8004110:	2b2a      	cmp	r3, #42	; 0x2a
 8004112:	d134      	bne.n	800417e <_svfiprintf_r+0x186>
 8004114:	9b03      	ldr	r3, [sp, #12]
 8004116:	1d1a      	adds	r2, r3, #4
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	9203      	str	r2, [sp, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	bfb8      	it	lt
 8004120:	f04f 33ff 	movlt.w	r3, #4294967295
 8004124:	3402      	adds	r4, #2
 8004126:	9305      	str	r3, [sp, #20]
 8004128:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80041f0 <_svfiprintf_r+0x1f8>
 800412c:	7821      	ldrb	r1, [r4, #0]
 800412e:	2203      	movs	r2, #3
 8004130:	4650      	mov	r0, sl
 8004132:	f7fc f86d 	bl	8000210 <memchr>
 8004136:	b138      	cbz	r0, 8004148 <_svfiprintf_r+0x150>
 8004138:	9b04      	ldr	r3, [sp, #16]
 800413a:	eba0 000a 	sub.w	r0, r0, sl
 800413e:	2240      	movs	r2, #64	; 0x40
 8004140:	4082      	lsls	r2, r0
 8004142:	4313      	orrs	r3, r2
 8004144:	3401      	adds	r4, #1
 8004146:	9304      	str	r3, [sp, #16]
 8004148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800414c:	4825      	ldr	r0, [pc, #148]	; (80041e4 <_svfiprintf_r+0x1ec>)
 800414e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004152:	2206      	movs	r2, #6
 8004154:	f7fc f85c 	bl	8000210 <memchr>
 8004158:	2800      	cmp	r0, #0
 800415a:	d038      	beq.n	80041ce <_svfiprintf_r+0x1d6>
 800415c:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <_svfiprintf_r+0x1f0>)
 800415e:	bb1b      	cbnz	r3, 80041a8 <_svfiprintf_r+0x1b0>
 8004160:	9b03      	ldr	r3, [sp, #12]
 8004162:	3307      	adds	r3, #7
 8004164:	f023 0307 	bic.w	r3, r3, #7
 8004168:	3308      	adds	r3, #8
 800416a:	9303      	str	r3, [sp, #12]
 800416c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800416e:	4433      	add	r3, r6
 8004170:	9309      	str	r3, [sp, #36]	; 0x24
 8004172:	e768      	b.n	8004046 <_svfiprintf_r+0x4e>
 8004174:	fb0c 3202 	mla	r2, ip, r2, r3
 8004178:	460c      	mov	r4, r1
 800417a:	2001      	movs	r0, #1
 800417c:	e7a6      	b.n	80040cc <_svfiprintf_r+0xd4>
 800417e:	2300      	movs	r3, #0
 8004180:	3401      	adds	r4, #1
 8004182:	9305      	str	r3, [sp, #20]
 8004184:	4619      	mov	r1, r3
 8004186:	f04f 0c0a 	mov.w	ip, #10
 800418a:	4620      	mov	r0, r4
 800418c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004190:	3a30      	subs	r2, #48	; 0x30
 8004192:	2a09      	cmp	r2, #9
 8004194:	d903      	bls.n	800419e <_svfiprintf_r+0x1a6>
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0c6      	beq.n	8004128 <_svfiprintf_r+0x130>
 800419a:	9105      	str	r1, [sp, #20]
 800419c:	e7c4      	b.n	8004128 <_svfiprintf_r+0x130>
 800419e:	fb0c 2101 	mla	r1, ip, r1, r2
 80041a2:	4604      	mov	r4, r0
 80041a4:	2301      	movs	r3, #1
 80041a6:	e7f0      	b.n	800418a <_svfiprintf_r+0x192>
 80041a8:	ab03      	add	r3, sp, #12
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	462a      	mov	r2, r5
 80041ae:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <_svfiprintf_r+0x1f4>)
 80041b0:	a904      	add	r1, sp, #16
 80041b2:	4638      	mov	r0, r7
 80041b4:	f3af 8000 	nop.w
 80041b8:	1c42      	adds	r2, r0, #1
 80041ba:	4606      	mov	r6, r0
 80041bc:	d1d6      	bne.n	800416c <_svfiprintf_r+0x174>
 80041be:	89ab      	ldrh	r3, [r5, #12]
 80041c0:	065b      	lsls	r3, r3, #25
 80041c2:	f53f af2d 	bmi.w	8004020 <_svfiprintf_r+0x28>
 80041c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041c8:	b01d      	add	sp, #116	; 0x74
 80041ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ce:	ab03      	add	r3, sp, #12
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	462a      	mov	r2, r5
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <_svfiprintf_r+0x1f4>)
 80041d6:	a904      	add	r1, sp, #16
 80041d8:	4638      	mov	r0, r7
 80041da:	f000 f879 	bl	80042d0 <_printf_i>
 80041de:	e7eb      	b.n	80041b8 <_svfiprintf_r+0x1c0>
 80041e0:	08005390 	.word	0x08005390
 80041e4:	0800539a 	.word	0x0800539a
 80041e8:	00000000 	.word	0x00000000
 80041ec:	08003f45 	.word	0x08003f45
 80041f0:	08005396 	.word	0x08005396

080041f4 <_printf_common>:
 80041f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f8:	4616      	mov	r6, r2
 80041fa:	4699      	mov	r9, r3
 80041fc:	688a      	ldr	r2, [r1, #8]
 80041fe:	690b      	ldr	r3, [r1, #16]
 8004200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004204:	4293      	cmp	r3, r2
 8004206:	bfb8      	it	lt
 8004208:	4613      	movlt	r3, r2
 800420a:	6033      	str	r3, [r6, #0]
 800420c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004210:	4607      	mov	r7, r0
 8004212:	460c      	mov	r4, r1
 8004214:	b10a      	cbz	r2, 800421a <_printf_common+0x26>
 8004216:	3301      	adds	r3, #1
 8004218:	6033      	str	r3, [r6, #0]
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	0699      	lsls	r1, r3, #26
 800421e:	bf42      	ittt	mi
 8004220:	6833      	ldrmi	r3, [r6, #0]
 8004222:	3302      	addmi	r3, #2
 8004224:	6033      	strmi	r3, [r6, #0]
 8004226:	6825      	ldr	r5, [r4, #0]
 8004228:	f015 0506 	ands.w	r5, r5, #6
 800422c:	d106      	bne.n	800423c <_printf_common+0x48>
 800422e:	f104 0a19 	add.w	sl, r4, #25
 8004232:	68e3      	ldr	r3, [r4, #12]
 8004234:	6832      	ldr	r2, [r6, #0]
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	42ab      	cmp	r3, r5
 800423a:	dc26      	bgt.n	800428a <_printf_common+0x96>
 800423c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004240:	1e13      	subs	r3, r2, #0
 8004242:	6822      	ldr	r2, [r4, #0]
 8004244:	bf18      	it	ne
 8004246:	2301      	movne	r3, #1
 8004248:	0692      	lsls	r2, r2, #26
 800424a:	d42b      	bmi.n	80042a4 <_printf_common+0xb0>
 800424c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004250:	4649      	mov	r1, r9
 8004252:	4638      	mov	r0, r7
 8004254:	47c0      	blx	r8
 8004256:	3001      	adds	r0, #1
 8004258:	d01e      	beq.n	8004298 <_printf_common+0xa4>
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	6922      	ldr	r2, [r4, #16]
 800425e:	f003 0306 	and.w	r3, r3, #6
 8004262:	2b04      	cmp	r3, #4
 8004264:	bf02      	ittt	eq
 8004266:	68e5      	ldreq	r5, [r4, #12]
 8004268:	6833      	ldreq	r3, [r6, #0]
 800426a:	1aed      	subeq	r5, r5, r3
 800426c:	68a3      	ldr	r3, [r4, #8]
 800426e:	bf0c      	ite	eq
 8004270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004274:	2500      	movne	r5, #0
 8004276:	4293      	cmp	r3, r2
 8004278:	bfc4      	itt	gt
 800427a:	1a9b      	subgt	r3, r3, r2
 800427c:	18ed      	addgt	r5, r5, r3
 800427e:	2600      	movs	r6, #0
 8004280:	341a      	adds	r4, #26
 8004282:	42b5      	cmp	r5, r6
 8004284:	d11a      	bne.n	80042bc <_printf_common+0xc8>
 8004286:	2000      	movs	r0, #0
 8004288:	e008      	b.n	800429c <_printf_common+0xa8>
 800428a:	2301      	movs	r3, #1
 800428c:	4652      	mov	r2, sl
 800428e:	4649      	mov	r1, r9
 8004290:	4638      	mov	r0, r7
 8004292:	47c0      	blx	r8
 8004294:	3001      	adds	r0, #1
 8004296:	d103      	bne.n	80042a0 <_printf_common+0xac>
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a0:	3501      	adds	r5, #1
 80042a2:	e7c6      	b.n	8004232 <_printf_common+0x3e>
 80042a4:	18e1      	adds	r1, r4, r3
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	2030      	movs	r0, #48	; 0x30
 80042aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042ae:	4422      	add	r2, r4
 80042b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042b8:	3302      	adds	r3, #2
 80042ba:	e7c7      	b.n	800424c <_printf_common+0x58>
 80042bc:	2301      	movs	r3, #1
 80042be:	4622      	mov	r2, r4
 80042c0:	4649      	mov	r1, r9
 80042c2:	4638      	mov	r0, r7
 80042c4:	47c0      	blx	r8
 80042c6:	3001      	adds	r0, #1
 80042c8:	d0e6      	beq.n	8004298 <_printf_common+0xa4>
 80042ca:	3601      	adds	r6, #1
 80042cc:	e7d9      	b.n	8004282 <_printf_common+0x8e>
	...

080042d0 <_printf_i>:
 80042d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042d4:	7e0f      	ldrb	r7, [r1, #24]
 80042d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042d8:	2f78      	cmp	r7, #120	; 0x78
 80042da:	4691      	mov	r9, r2
 80042dc:	4680      	mov	r8, r0
 80042de:	460c      	mov	r4, r1
 80042e0:	469a      	mov	sl, r3
 80042e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042e6:	d807      	bhi.n	80042f8 <_printf_i+0x28>
 80042e8:	2f62      	cmp	r7, #98	; 0x62
 80042ea:	d80a      	bhi.n	8004302 <_printf_i+0x32>
 80042ec:	2f00      	cmp	r7, #0
 80042ee:	f000 80d4 	beq.w	800449a <_printf_i+0x1ca>
 80042f2:	2f58      	cmp	r7, #88	; 0x58
 80042f4:	f000 80c0 	beq.w	8004478 <_printf_i+0x1a8>
 80042f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004300:	e03a      	b.n	8004378 <_printf_i+0xa8>
 8004302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004306:	2b15      	cmp	r3, #21
 8004308:	d8f6      	bhi.n	80042f8 <_printf_i+0x28>
 800430a:	a101      	add	r1, pc, #4	; (adr r1, 8004310 <_printf_i+0x40>)
 800430c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004310:	08004369 	.word	0x08004369
 8004314:	0800437d 	.word	0x0800437d
 8004318:	080042f9 	.word	0x080042f9
 800431c:	080042f9 	.word	0x080042f9
 8004320:	080042f9 	.word	0x080042f9
 8004324:	080042f9 	.word	0x080042f9
 8004328:	0800437d 	.word	0x0800437d
 800432c:	080042f9 	.word	0x080042f9
 8004330:	080042f9 	.word	0x080042f9
 8004334:	080042f9 	.word	0x080042f9
 8004338:	080042f9 	.word	0x080042f9
 800433c:	08004481 	.word	0x08004481
 8004340:	080043a9 	.word	0x080043a9
 8004344:	0800443b 	.word	0x0800443b
 8004348:	080042f9 	.word	0x080042f9
 800434c:	080042f9 	.word	0x080042f9
 8004350:	080044a3 	.word	0x080044a3
 8004354:	080042f9 	.word	0x080042f9
 8004358:	080043a9 	.word	0x080043a9
 800435c:	080042f9 	.word	0x080042f9
 8004360:	080042f9 	.word	0x080042f9
 8004364:	08004443 	.word	0x08004443
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	1d1a      	adds	r2, r3, #4
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	602a      	str	r2, [r5, #0]
 8004370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004378:	2301      	movs	r3, #1
 800437a:	e09f      	b.n	80044bc <_printf_i+0x1ec>
 800437c:	6820      	ldr	r0, [r4, #0]
 800437e:	682b      	ldr	r3, [r5, #0]
 8004380:	0607      	lsls	r7, r0, #24
 8004382:	f103 0104 	add.w	r1, r3, #4
 8004386:	6029      	str	r1, [r5, #0]
 8004388:	d501      	bpl.n	800438e <_printf_i+0xbe>
 800438a:	681e      	ldr	r6, [r3, #0]
 800438c:	e003      	b.n	8004396 <_printf_i+0xc6>
 800438e:	0646      	lsls	r6, r0, #25
 8004390:	d5fb      	bpl.n	800438a <_printf_i+0xba>
 8004392:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004396:	2e00      	cmp	r6, #0
 8004398:	da03      	bge.n	80043a2 <_printf_i+0xd2>
 800439a:	232d      	movs	r3, #45	; 0x2d
 800439c:	4276      	negs	r6, r6
 800439e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043a2:	485a      	ldr	r0, [pc, #360]	; (800450c <_printf_i+0x23c>)
 80043a4:	230a      	movs	r3, #10
 80043a6:	e012      	b.n	80043ce <_printf_i+0xfe>
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	6820      	ldr	r0, [r4, #0]
 80043ac:	1d19      	adds	r1, r3, #4
 80043ae:	6029      	str	r1, [r5, #0]
 80043b0:	0605      	lsls	r5, r0, #24
 80043b2:	d501      	bpl.n	80043b8 <_printf_i+0xe8>
 80043b4:	681e      	ldr	r6, [r3, #0]
 80043b6:	e002      	b.n	80043be <_printf_i+0xee>
 80043b8:	0641      	lsls	r1, r0, #25
 80043ba:	d5fb      	bpl.n	80043b4 <_printf_i+0xe4>
 80043bc:	881e      	ldrh	r6, [r3, #0]
 80043be:	4853      	ldr	r0, [pc, #332]	; (800450c <_printf_i+0x23c>)
 80043c0:	2f6f      	cmp	r7, #111	; 0x6f
 80043c2:	bf0c      	ite	eq
 80043c4:	2308      	moveq	r3, #8
 80043c6:	230a      	movne	r3, #10
 80043c8:	2100      	movs	r1, #0
 80043ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043ce:	6865      	ldr	r5, [r4, #4]
 80043d0:	60a5      	str	r5, [r4, #8]
 80043d2:	2d00      	cmp	r5, #0
 80043d4:	bfa2      	ittt	ge
 80043d6:	6821      	ldrge	r1, [r4, #0]
 80043d8:	f021 0104 	bicge.w	r1, r1, #4
 80043dc:	6021      	strge	r1, [r4, #0]
 80043de:	b90e      	cbnz	r6, 80043e4 <_printf_i+0x114>
 80043e0:	2d00      	cmp	r5, #0
 80043e2:	d04b      	beq.n	800447c <_printf_i+0x1ac>
 80043e4:	4615      	mov	r5, r2
 80043e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80043ea:	fb03 6711 	mls	r7, r3, r1, r6
 80043ee:	5dc7      	ldrb	r7, [r0, r7]
 80043f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043f4:	4637      	mov	r7, r6
 80043f6:	42bb      	cmp	r3, r7
 80043f8:	460e      	mov	r6, r1
 80043fa:	d9f4      	bls.n	80043e6 <_printf_i+0x116>
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d10b      	bne.n	8004418 <_printf_i+0x148>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	07de      	lsls	r6, r3, #31
 8004404:	d508      	bpl.n	8004418 <_printf_i+0x148>
 8004406:	6923      	ldr	r3, [r4, #16]
 8004408:	6861      	ldr	r1, [r4, #4]
 800440a:	4299      	cmp	r1, r3
 800440c:	bfde      	ittt	le
 800440e:	2330      	movle	r3, #48	; 0x30
 8004410:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004414:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004418:	1b52      	subs	r2, r2, r5
 800441a:	6122      	str	r2, [r4, #16]
 800441c:	f8cd a000 	str.w	sl, [sp]
 8004420:	464b      	mov	r3, r9
 8004422:	aa03      	add	r2, sp, #12
 8004424:	4621      	mov	r1, r4
 8004426:	4640      	mov	r0, r8
 8004428:	f7ff fee4 	bl	80041f4 <_printf_common>
 800442c:	3001      	adds	r0, #1
 800442e:	d14a      	bne.n	80044c6 <_printf_i+0x1f6>
 8004430:	f04f 30ff 	mov.w	r0, #4294967295
 8004434:	b004      	add	sp, #16
 8004436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	f043 0320 	orr.w	r3, r3, #32
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	4833      	ldr	r0, [pc, #204]	; (8004510 <_printf_i+0x240>)
 8004444:	2778      	movs	r7, #120	; 0x78
 8004446:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	6829      	ldr	r1, [r5, #0]
 800444e:	061f      	lsls	r7, r3, #24
 8004450:	f851 6b04 	ldr.w	r6, [r1], #4
 8004454:	d402      	bmi.n	800445c <_printf_i+0x18c>
 8004456:	065f      	lsls	r7, r3, #25
 8004458:	bf48      	it	mi
 800445a:	b2b6      	uxthmi	r6, r6
 800445c:	07df      	lsls	r7, r3, #31
 800445e:	bf48      	it	mi
 8004460:	f043 0320 	orrmi.w	r3, r3, #32
 8004464:	6029      	str	r1, [r5, #0]
 8004466:	bf48      	it	mi
 8004468:	6023      	strmi	r3, [r4, #0]
 800446a:	b91e      	cbnz	r6, 8004474 <_printf_i+0x1a4>
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	f023 0320 	bic.w	r3, r3, #32
 8004472:	6023      	str	r3, [r4, #0]
 8004474:	2310      	movs	r3, #16
 8004476:	e7a7      	b.n	80043c8 <_printf_i+0xf8>
 8004478:	4824      	ldr	r0, [pc, #144]	; (800450c <_printf_i+0x23c>)
 800447a:	e7e4      	b.n	8004446 <_printf_i+0x176>
 800447c:	4615      	mov	r5, r2
 800447e:	e7bd      	b.n	80043fc <_printf_i+0x12c>
 8004480:	682b      	ldr	r3, [r5, #0]
 8004482:	6826      	ldr	r6, [r4, #0]
 8004484:	6961      	ldr	r1, [r4, #20]
 8004486:	1d18      	adds	r0, r3, #4
 8004488:	6028      	str	r0, [r5, #0]
 800448a:	0635      	lsls	r5, r6, #24
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	d501      	bpl.n	8004494 <_printf_i+0x1c4>
 8004490:	6019      	str	r1, [r3, #0]
 8004492:	e002      	b.n	800449a <_printf_i+0x1ca>
 8004494:	0670      	lsls	r0, r6, #25
 8004496:	d5fb      	bpl.n	8004490 <_printf_i+0x1c0>
 8004498:	8019      	strh	r1, [r3, #0]
 800449a:	2300      	movs	r3, #0
 800449c:	6123      	str	r3, [r4, #16]
 800449e:	4615      	mov	r5, r2
 80044a0:	e7bc      	b.n	800441c <_printf_i+0x14c>
 80044a2:	682b      	ldr	r3, [r5, #0]
 80044a4:	1d1a      	adds	r2, r3, #4
 80044a6:	602a      	str	r2, [r5, #0]
 80044a8:	681d      	ldr	r5, [r3, #0]
 80044aa:	6862      	ldr	r2, [r4, #4]
 80044ac:	2100      	movs	r1, #0
 80044ae:	4628      	mov	r0, r5
 80044b0:	f7fb feae 	bl	8000210 <memchr>
 80044b4:	b108      	cbz	r0, 80044ba <_printf_i+0x1ea>
 80044b6:	1b40      	subs	r0, r0, r5
 80044b8:	6060      	str	r0, [r4, #4]
 80044ba:	6863      	ldr	r3, [r4, #4]
 80044bc:	6123      	str	r3, [r4, #16]
 80044be:	2300      	movs	r3, #0
 80044c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044c4:	e7aa      	b.n	800441c <_printf_i+0x14c>
 80044c6:	6923      	ldr	r3, [r4, #16]
 80044c8:	462a      	mov	r2, r5
 80044ca:	4649      	mov	r1, r9
 80044cc:	4640      	mov	r0, r8
 80044ce:	47d0      	blx	sl
 80044d0:	3001      	adds	r0, #1
 80044d2:	d0ad      	beq.n	8004430 <_printf_i+0x160>
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	079b      	lsls	r3, r3, #30
 80044d8:	d413      	bmi.n	8004502 <_printf_i+0x232>
 80044da:	68e0      	ldr	r0, [r4, #12]
 80044dc:	9b03      	ldr	r3, [sp, #12]
 80044de:	4298      	cmp	r0, r3
 80044e0:	bfb8      	it	lt
 80044e2:	4618      	movlt	r0, r3
 80044e4:	e7a6      	b.n	8004434 <_printf_i+0x164>
 80044e6:	2301      	movs	r3, #1
 80044e8:	4632      	mov	r2, r6
 80044ea:	4649      	mov	r1, r9
 80044ec:	4640      	mov	r0, r8
 80044ee:	47d0      	blx	sl
 80044f0:	3001      	adds	r0, #1
 80044f2:	d09d      	beq.n	8004430 <_printf_i+0x160>
 80044f4:	3501      	adds	r5, #1
 80044f6:	68e3      	ldr	r3, [r4, #12]
 80044f8:	9903      	ldr	r1, [sp, #12]
 80044fa:	1a5b      	subs	r3, r3, r1
 80044fc:	42ab      	cmp	r3, r5
 80044fe:	dcf2      	bgt.n	80044e6 <_printf_i+0x216>
 8004500:	e7eb      	b.n	80044da <_printf_i+0x20a>
 8004502:	2500      	movs	r5, #0
 8004504:	f104 0619 	add.w	r6, r4, #25
 8004508:	e7f5      	b.n	80044f6 <_printf_i+0x226>
 800450a:	bf00      	nop
 800450c:	080053a1 	.word	0x080053a1
 8004510:	080053b2 	.word	0x080053b2

08004514 <memmove>:
 8004514:	4288      	cmp	r0, r1
 8004516:	b510      	push	{r4, lr}
 8004518:	eb01 0402 	add.w	r4, r1, r2
 800451c:	d902      	bls.n	8004524 <memmove+0x10>
 800451e:	4284      	cmp	r4, r0
 8004520:	4623      	mov	r3, r4
 8004522:	d807      	bhi.n	8004534 <memmove+0x20>
 8004524:	1e43      	subs	r3, r0, #1
 8004526:	42a1      	cmp	r1, r4
 8004528:	d008      	beq.n	800453c <memmove+0x28>
 800452a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800452e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004532:	e7f8      	b.n	8004526 <memmove+0x12>
 8004534:	4402      	add	r2, r0
 8004536:	4601      	mov	r1, r0
 8004538:	428a      	cmp	r2, r1
 800453a:	d100      	bne.n	800453e <memmove+0x2a>
 800453c:	bd10      	pop	{r4, pc}
 800453e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004546:	e7f7      	b.n	8004538 <memmove+0x24>

08004548 <_sbrk_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4d06      	ldr	r5, [pc, #24]	; (8004564 <_sbrk_r+0x1c>)
 800454c:	2300      	movs	r3, #0
 800454e:	4604      	mov	r4, r0
 8004550:	4608      	mov	r0, r1
 8004552:	602b      	str	r3, [r5, #0]
 8004554:	f7fc fe20 	bl	8001198 <_sbrk>
 8004558:	1c43      	adds	r3, r0, #1
 800455a:	d102      	bne.n	8004562 <_sbrk_r+0x1a>
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	b103      	cbz	r3, 8004562 <_sbrk_r+0x1a>
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	bd38      	pop	{r3, r4, r5, pc}
 8004564:	200006b8 	.word	0x200006b8

08004568 <memcpy>:
 8004568:	440a      	add	r2, r1
 800456a:	4291      	cmp	r1, r2
 800456c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004570:	d100      	bne.n	8004574 <memcpy+0xc>
 8004572:	4770      	bx	lr
 8004574:	b510      	push	{r4, lr}
 8004576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800457a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800457e:	4291      	cmp	r1, r2
 8004580:	d1f9      	bne.n	8004576 <memcpy+0xe>
 8004582:	bd10      	pop	{r4, pc}

08004584 <_realloc_r>:
 8004584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004588:	4680      	mov	r8, r0
 800458a:	4614      	mov	r4, r2
 800458c:	460e      	mov	r6, r1
 800458e:	b921      	cbnz	r1, 800459a <_realloc_r+0x16>
 8004590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004594:	4611      	mov	r1, r2
 8004596:	f7ff bc49 	b.w	8003e2c <_malloc_r>
 800459a:	b92a      	cbnz	r2, 80045a8 <_realloc_r+0x24>
 800459c:	f7ff fbda 	bl	8003d54 <_free_r>
 80045a0:	4625      	mov	r5, r4
 80045a2:	4628      	mov	r0, r5
 80045a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045a8:	f000 f81b 	bl	80045e2 <_malloc_usable_size_r>
 80045ac:	4284      	cmp	r4, r0
 80045ae:	4607      	mov	r7, r0
 80045b0:	d802      	bhi.n	80045b8 <_realloc_r+0x34>
 80045b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045b6:	d812      	bhi.n	80045de <_realloc_r+0x5a>
 80045b8:	4621      	mov	r1, r4
 80045ba:	4640      	mov	r0, r8
 80045bc:	f7ff fc36 	bl	8003e2c <_malloc_r>
 80045c0:	4605      	mov	r5, r0
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d0ed      	beq.n	80045a2 <_realloc_r+0x1e>
 80045c6:	42bc      	cmp	r4, r7
 80045c8:	4622      	mov	r2, r4
 80045ca:	4631      	mov	r1, r6
 80045cc:	bf28      	it	cs
 80045ce:	463a      	movcs	r2, r7
 80045d0:	f7ff ffca 	bl	8004568 <memcpy>
 80045d4:	4631      	mov	r1, r6
 80045d6:	4640      	mov	r0, r8
 80045d8:	f7ff fbbc 	bl	8003d54 <_free_r>
 80045dc:	e7e1      	b.n	80045a2 <_realloc_r+0x1e>
 80045de:	4635      	mov	r5, r6
 80045e0:	e7df      	b.n	80045a2 <_realloc_r+0x1e>

080045e2 <_malloc_usable_size_r>:
 80045e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045e6:	1f18      	subs	r0, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bfbc      	itt	lt
 80045ec:	580b      	ldrlt	r3, [r1, r0]
 80045ee:	18c0      	addlt	r0, r0, r3
 80045f0:	4770      	bx	lr
	...

080045f4 <_init>:
 80045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f6:	bf00      	nop
 80045f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fa:	bc08      	pop	{r3}
 80045fc:	469e      	mov	lr, r3
 80045fe:	4770      	bx	lr

08004600 <_fini>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	bf00      	nop
 8004604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004606:	bc08      	pop	{r3}
 8004608:	469e      	mov	lr, r3
 800460a:	4770      	bx	lr
